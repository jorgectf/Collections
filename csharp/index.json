{
  "api/Platform.Collections.Arrays.ArrayFiller-1.html": {
    "href": "api/Platform.Collections.Arrays.ArrayFiller-1.html",
    "title": "Class ArrayFiller<TElement> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ArrayFiller<TElement> Represents an TElement[] array filler. Представляет заполнитель массива TElement[] . Inheritance Object ArrayFiller<TElement> ArrayFiller<TElement, TReturnConstant> Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public class ArrayFiller<TElement> : object Type Parameters Name Description TElement The elements' type. Тип элементов массива. Constructors | Improve this Doc View Source ArrayFiller(TElement[]) Initializes a new instance of the class using the specified array. Filling will start from the beginning of the array. Инициализирует новый экземпляр класса , используя указанный массив. Заполнение начнётся с начала массива. Declaration public ArrayFiller(TElement[] array) Parameters Type Name Description TElement[] array The array to fill. Массив для заполнения. | Improve this Doc View Source ArrayFiller(TElement[], Int64) Initializes a new instance of the class using the specified array as the array to fill and the offset from which to start filling. Инициализирует новый экземпляр класса , используя указанный массив в качестве заполняемого и смещение с которого начнётся заполнение. Declaration public ArrayFiller(TElement[] array, long offset) Parameters Type Name Description TElement[] array The array to fill. Массив для заполнения. Int64 offset The offset from which to start filling the array. Смещение с которого начнётся заполнение массива. Fields | Improve this Doc View Source _array Declaration protected readonly TElement[] _array Field Value Type Description TElement[] | Improve this Doc View Source _position Declaration protected long _position Field Value Type Description Int64 Methods | Improve this Doc View Source Add(TElement) Adds an item into the array. Добавляет элемент в массив. Declaration public void Add(TElement element) Parameters Type Name Description TElement element The element to add. Добавляемый элемент. | Improve this Doc View Source AddAllAndReturnTrue(IList<TElement>) Adds all elements from the specified list to the array to fill and returns true . Добавляет все элементы из указанного списка в заполняемый массив и возвращает true . Declaration public bool AddAllAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The list of values to add. Список значений которые необходимо добавить. Returns Type Description Boolean The true value. Значение true . | Improve this Doc View Source AddAndReturnTrue(TElement) Adds an item into the array and returns true . Добавляет элемент в массив и возвращает true . Declaration public bool AddAndReturnTrue(TElement element) Parameters Type Name Description TElement element The element to add. Добавляемый элемент. Returns Type Description Boolean The true value. Значение true . | Improve this Doc View Source AddFirstAndReturnTrue(IList<TElement>) Adds the first element from the specified list to the array to fill and returns true . Добавляет первый элемент из указанного списка в заполняемый массив и возвращает true . Declaration public bool AddFirstAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The list from which the first item will be added. Список из которого будет добавлен первый элемент. Returns Type Description Boolean The true value. Значение true . | Improve this Doc View Source AddSkipFirstAndReturnTrue(IList<TElement>) Adds values to the array skipping the first element and returns true . Добавляет значения в массив пропуская первый элемент и возвращает true . Declaration public bool AddSkipFirstAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements A list from which elements will be added except the first. Список из которого будут добавлены элементы кроме первого. Returns Type Description Boolean The true value. Значение true ."
  },
  "api/Platform.Collections.Arrays.ArrayFiller-2.html": {
    "href": "api/Platform.Collections.Arrays.ArrayFiller-2.html",
    "title": "Class ArrayFiller<TElement, TReturnConstant> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ArrayFiller<TElement, TReturnConstant> Represents TElement[] array filler with additional methods that return a given constant of type . Представляет заполнитель массива TElement[] c дополнительными методами, возвращающими заданную константу типа . Inheritance Object ArrayFiller <TElement> ArrayFiller<TElement, TReturnConstant> Inherited Members ArrayFiller<TElement>._array ArrayFiller<TElement>._position ArrayFiller<TElement>.Add(TElement) ArrayFiller<TElement>.AddAndReturnTrue(TElement) ArrayFiller<TElement>.AddFirstAndReturnTrue(IList<TElement>) ArrayFiller<TElement>.AddAllAndReturnTrue(IList<TElement>) ArrayFiller<TElement>.AddSkipFirstAndReturnTrue(IList<TElement>) Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public class ArrayFiller<TElement, TReturnConstant> : ArrayFiller<TElement> Type Parameters Name Description TElement The elements' type. Тип элементов массива. TReturnConstant The return constant's type. Тип возвращаемой константы. Constructors | Improve this Doc View Source ArrayFiller(TElement[], TReturnConstant) Initializes a new instance of the class using the specified array and the constant returned when elements are being filled. Filling will start from the beginning of the array. Инициализирует новый экземпляр класса , используя указанный массив и константу возвращаемую при заполнении элементов. Заполнение начнётся с начала массива. Declaration public ArrayFiller(TElement[] array, TReturnConstant returnConstant) Parameters Type Name Description TElement[] array The array to fill. Массив для заполнения. TReturnConstant returnConstant The constant's value. Значение константы. | Improve this Doc View Source ArrayFiller(TElement[], Int64, TReturnConstant) Initializes a new instance of the class using the specified array, the offset from which filling will start and the constant returned when elements are being filled. Инициализирует новый экземпляр класса , используя указанный массив, смещение с которого начнётся заполнение и константу возвращаемую при заполнении элементов. Declaration public ArrayFiller(TElement[] array, long offset, TReturnConstant returnConstant) Parameters Type Name Description TElement[] array The array to fill. Массив для заполнения. Int64 offset The offset from which to start the array filling. Смещение с которого начнётся заполнение массива. TReturnConstant returnConstant The constant's value. Значение константы. Fields | Improve this Doc View Source _returnConstant Declaration protected readonly TReturnConstant _returnConstant Field Value Type Description TReturnConstant Methods | Improve this Doc View Source AddAllAndReturnConstant(IList<TElement>) Adds all elements from the specified list to the filled array and returns the constant. Добавляет все элементы из указанного списка в заполняемый массив и возвращает константу. Declaration public TReturnConstant AddAllAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The list of values to add. Список значений для добавления. Returns Type Description TReturnConstant The constant's value. Значение константы. | Improve this Doc View Source AddAndReturnConstant(TElement) Adds an item into the array and returns the constant. Добавляет элемент в массив и возвращает константу. Declaration public TReturnConstant AddAndReturnConstant(TElement element) Parameters Type Name Description TElement element The element to add. Добавляемый элемент. Returns Type Description TReturnConstant The constant's value. Значение константы. | Improve this Doc View Source AddFirstAndReturnConstant(IList<TElement>) Adds the first element from the specified list to the filled array and returns the constant. Добавляет первый элемент из указанного списка в заполняемый массив и возвращает константу. Declaration public TReturnConstant AddFirstAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description TReturnConstant The constant's value. Значение константы. | Improve this Doc View Source AddSkipFirstAndReturnConstant(IList<TElement>) Adds the elements of the list to the array, skipping the first element and returns the constant. Добавляет элементы списка в массив пропуская первый элемент и возвращает константу. Declaration public TReturnConstant AddSkipFirstAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The list of values to add. Список значений для добавления. Returns Type Description TReturnConstant The constant's value. Значение константы."
  },
  "api/Platform.Collections.Arrays.ArrayPool.html": {
    "href": "api/Platform.Collections.Arrays.ArrayPool.html",
    "title": "Class ArrayPool | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ArrayPool Represents a set of wrapper methods over ArrayPool<T> class methods to simplify access to them. Представляет набор методов обёрток над методами класса ArrayPool<T> для упрощения доступа к ним. Inheritance Object ArrayPool Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public static class ArrayPool : object Fields | Improve this Doc View Source DefaultMaxArraysPerSize Declaration public static readonly int DefaultMaxArraysPerSize Field Value Type Description Int32 | Improve this Doc View Source DefaultSizesAmount Declaration public static readonly int DefaultSizesAmount Field Value Type Description Int32 Methods | Improve this Doc View Source Allocate<T>(Int64) Allocation of an array of a specified size from the array pool. Выделение массива указанного размера из пула массивов. Declaration public static T[] Allocate<T>(long size) Parameters Type Name Description Int64 size The allocated array size. Размер выделяемого массива. Returns Type Description T[] The array from a pool of arrays. Массив из пулла массивов. Type Parameters Name Description T The array elements type. Тип элементов массива. | Improve this Doc View Source Free<T>(T[]) Freeing an array into an array pool. Освобождение массива в пул массивов. Declaration public static void Free<T>(T[] array) Parameters Type Name Description T[] array The array to be freed into the pull. Массив который нужно освобоить в пулл. Type Parameters Name Description T The array elements type. Тип элементов массива."
  },
  "api/Platform.Collections.Arrays.ArrayPool-1.html": {
    "href": "api/Platform.Collections.Arrays.ArrayPool-1.html",
    "title": "Class ArrayPool<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ArrayPool<T> Represents a set of arrays ready for reuse. Представляет собой набор массивов готовых к повторному использованию. Inheritance Object ArrayPool<T> Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public class ArrayPool<T> : object Type Parameters Name Description T The array elements type. Тип элементов массива. Remarks Original idea from http://geekswithblogs.net/blackrob/archive/2014/12/18/array-pooling-in-csharp.aspx Constructors | Improve this Doc View Source ArrayPool() Initializes a new instance of the ArrayPool class using the default maximum number of arrays per size. Инициализирует новый экземпляр класса ArrayPool, используя максимальное количество массивов на каждый размер по умолчанию. Declaration public ArrayPool() | Improve this Doc View Source ArrayPool(Int32) Initializes a new instance of the ArrayPool class using the specified maximum number of arrays per size. Инициализирует новый экземпляр класса ArrayPool, используя указанное максимальное количество массивов на каждый размер. Declaration public ArrayPool(int maxArraysPerSize) Parameters Type Name Description Int32 maxArraysPerSize The maximum number of arrays in the pool per size. Максимальное количество массивов в пуле на каждый размер. Methods | Improve this Doc View Source Allocate(Int64) Retrieves an array with the specified size from the pool. Извлекает из пула массив с указанным размером. Declaration public virtual T[] Allocate(long size) Parameters Type Name Description Int64 size The allocated array size. Размер выделяемого массива. Returns Type Description T[] An array from the pool or a new array. Массив из пула или новый массив. | Improve this Doc View Source AllocateDisposable(Int64) Retrieves an array from the pool, which will automatically return to the pool when the container is disposed. Извлекает из пула массив, который автоматически вернётся в пул при высвобождении контейнера. Declaration public Disposable<T[]> AllocateDisposable(long size) Parameters Type Name Description Int64 size The allocated array size. Размер выделяемого массива. Returns Type Description Disposable <T[]> The disposable container containing either a new array or an array from the pool. Высвобождаемый контейнер содержащий либо новый массив, либо массив из пула. | Improve this Doc View Source Clear() Clears the pool. Очищает пул. Declaration public virtual void Clear() | Improve this Doc View Source Free(T[]) Frees the array to the pool for later reuse. Освобождает массив в пул для последующего повторного использования. Declaration public virtual void Free(T[] array) Parameters Type Name Description T[] array The array to be freed into the pool. Массив который нужно освободить в пул. | Improve this Doc View Source Resize(Disposable<T[]>, Int64) Replaces the array with another array from the pool with the specified size. Заменяет массив на другой массив из пула с указанным размером. Declaration public Disposable<T[]> Resize(Disposable<T[]> source, long size) Parameters Type Name Description Disposable <T[]> source The source array. Исходный массив. Int64 size A new array size. Новый размер массива. Returns Type Description Disposable <T[]> An array with a new size. Массив с новым размером."
  },
  "api/Platform.Collections.Arrays.ArrayString-1.html": {
    "href": "api/Platform.Collections.Arrays.ArrayString-1.html",
    "title": "Class ArrayString<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ArrayString<T> Inheritance Object Segment <T> ArrayString<T> Implements IList <T> Inherited Members Segment<T>.Base Segment<T>.Offset Segment<T>.Length Segment<T>.GetHashCode() Segment<T>.Equals(Segment<T>) Segment<T>.Equals(Object) Segment<T>.Item[Int32] Segment<T>.Count Segment<T>.IsReadOnly Segment<T>.IndexOf(T) Segment<T>.Insert(Int32, T) Segment<T>.RemoveAt(Int32) Segment<T>.Add(T) Segment<T>.Clear() Segment<T>.Contains(T) Segment<T>.CopyTo(T[], Int32) Segment<T>.Remove(T) Segment<T>.GetEnumerator() Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public class ArrayString<T> : Segment<T>, IList<T> Type Parameters Name Description T Constructors | Improve this Doc View Source ArrayString(T[]) Declaration public ArrayString(T[] array) Parameters Type Name Description T[] array | Improve this Doc View Source ArrayString(T[], Int32) Declaration public ArrayString(T[] array, int length) Parameters Type Name Description T[] array Int32 length | Improve this Doc View Source ArrayString(Int32) Declaration public ArrayString(int length) Parameters Type Name Description Int32 length Implements IList<>"
  },
  "api/Platform.Collections.Arrays.CharArrayExtensions.html": {
    "href": "api/Platform.Collections.Arrays.CharArrayExtensions.html",
    "title": "Class CharArrayExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class CharArrayExtensions Inheritance Object CharArrayExtensions Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public static class CharArrayExtensions : object Methods | Improve this Doc View Source ContentEqualTo(Char[], Int32, Int32, Char[], Int32) Checks if all elements of two lists are equal. Проверяет равны ли все элементы двух списков. Declaration public static bool ContentEqualTo(this char[] left, int leftOffset, int length, char[] right, int rightOffset) Parameters Type Name Description Char [] left The first compared array. Первый массив для сравнения. Int32 leftOffset The offset from which reading of the specified number of elements in the first array starts. Смещение, с которого начинается чтение элементов в первом массиве. Int32 length The number of checked elements. Количество проверяемых элементов. Char [] right The second compared array. Второй массив для сравнения. Int32 rightOffset The offset from which reading of the specified number of elements in the second array starts. Смещение, с которого начинается чтение элементов в втором массиве. Returns Type Description Boolean true if the segments of the passed arrays are equal to each other otherwise false . true , если сегменты переданных массивов равны друг другу, иначе же false . Remarks Based on https://github.com/Microsoft/referencesource/blob/3b1eaf5203992df69de44c783a3eda37d3d4cd10/mscorlib/system/string.cs#L364 | Improve this Doc View Source GenerateHashCode(Char[], Int32, Int32) Generates a hash code for an array segment with the specified offset and length. The hash code is generated based on the values of the array elements included in the specified segment. Генерирует хэш-код сегмента массива с указанным смещением и длиной. Хэш-код генерируется на основе значений элементов массива входящих в указанный сегмент. Declaration public static int GenerateHashCode(this char[] array, int offset, int length) Parameters Type Name Description Char [] array The array to hash. Массив для хеширования. Int32 offset The offset from which reading of the specified number of elements in the array starts. Смещение, с которого начинается чтение указанного количества элементов в массиве. Int32 length The number of array elements used to calculate the hash. Количество элементов массива, на основе которых будет вычислен хэш. Returns Type Description Int32 The hash code of the segment in the array. Хэш-код сегмента в массиве. Remarks Based on https://github.com/Microsoft/referencesource/blob/3b1eaf5203992df69de44c783a3eda37d3d4cd10/mscorlib/system/string.cs#L833"
  },
  "api/Platform.Collections.Arrays.GenericArrayExtensions.html": {
    "href": "api/Platform.Collections.Arrays.GenericArrayExtensions.html",
    "title": "Class GenericArrayExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class GenericArrayExtensions Represents a set of extension methods for a T[] array. Представляет набор методов расширения для массива T[] . Inheritance Object GenericArrayExtensions Namespace : Platform.Collections.Arrays Assembly : Platform.Collections.dll Syntax public static class GenericArrayExtensions : object Methods | Improve this Doc View Source Add<T>(T[], ref Int32, T) Adding in array the passed element at the specified position and increments position value by one. Добавляет в массив переданный элемент на указанную позицию и увеличивает значение position на единицу. Declaration public static void Add<T>(this T[] array, ref int position, T element) Parameters Type Name Description T[] array The array to add the element to. Массив в который необходимо добавить элемент. Int32 position A reference to the position of type int where the element will be added. Ссылка на позицию типа int, в которую будет добавлен элемент. T element The element to add to the array. Элемент, который нужно добавить в массив. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source Add<T>(T[], ref Int64, T) Adding in array the passed element at the specified position and increments position value by one. Добавляет в массив переданный элемент на указанную позицию и увеличивает значение position на единицу. Declaration public static void Add<T>(this T[] array, ref long position, T element) Parameters Type Name Description T[] array The array to add the element to. Массив в который необходимо добавить элемент. Int64 position A reference to the position of type long where the element will be added. Ссылка на позицию типа long, в которую будет добавлен элемент. T element The element to add to the array Элемент который необходимо добавить в массив. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source AddAll<T>(T[], ref Int64, IList<T>) Adding in array a collection of elements, starting from a specific position and increases the position value by the number of elements added. Добавляет в массив все элементы коллекции, начиная с определенной позиции и увеличивает значение position на количество добавленных элементов. Declaration public static void AddAll<T>(this T[] array, ref long position, IList<T> elements) Parameters Type Name Description T[] array The array to add the element to. Массив в который необходимо добавить элементы. Int64 position Reference to the position from which elements will be added to the array. Ссылка на позицию, начиная с которой будут добавляться элементы в массив. IList <T> elements List, whose elements will be added to the array. Список, элементы которого будут добавленны в массив. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source AddAllAndReturnConstant<TElement, TReturnConstant>(TElement[], ref Int64, IList<TElement>, TReturnConstant) Adding in array all elements from the passed collection, at the specified position, increases the position value by the number of elements added and returns the value of the passed constant. Добавляет в массив все элементы из переданной коллекции, на указанную позицию, увеличивает значение position на количество добавленных элементов и возвращает значение переданной константы. Declaration public static TReturnConstant AddAllAndReturnConstant<TElement, TReturnConstant>(this TElement[] array, ref long position, IList<TElement> elements, TReturnConstant returnConstant) Parameters Type Name Description TElement[] array The array to add the element to. Массив в который необходимо добавить элементы. Int64 position Reference to the position from which elements will be added to the array. Ссылка на позицию, начиная с которой будут добавляться элементы в массив. IList <TElement> elements List, whose elements will be added to the array. Список, элементы которого будут добавленны в массив. TReturnConstant returnConstant The constant value that will be returned. Значение константы, которое будет возвращено. Returns Type Description TReturnConstant The constant value passed as an argument. Значение константы, переданное в качестве аргумента. Type Parameters Name Description TElement The array element type. Тип элемента массива. TReturnConstant Type of return constant. Тип возвращаемой константы. | Improve this Doc View Source AddAndReturnConstant<TElement, TReturnConstant>(TElement[], ref Int64, TElement, TReturnConstant) Adding in array the passed element, at the specified position, increments position value by one and returns the value of the passed constant. Добавляет в массив переданный элемент на указанную позицию, увеличивает значение position на единицу и возвращает значение переданной константы. Declaration public static TReturnConstant AddAndReturnConstant<TElement, TReturnConstant>(this TElement[] array, ref long position, TElement element, TReturnConstant returnConstant) Parameters Type Name Description TElement[] array The array to add the element to. Массив в который необходимо добавить элемент. Int64 position Reference to the position to which the element will be added. Ссылка на позицию, в которую будет добавлен элемент. TElement element The element to add to the array. Элемент который необходимо добавить в массив. TReturnConstant returnConstant The constant value that will be returned. Значение константы, которое будет возвращено. Returns Type Description TReturnConstant The constant value passed as an argument. Значение константы, переданное в качестве аргумента. Type Parameters Name Description TElement The array element type. Тип элемента массива. TReturnConstant Type of return constant. Тип возвращаемой константы. | Improve this Doc View Source AddFirst<T>(T[], ref Int64, IList<T>) Adds the first element from the passed collection to the array, at the specified position and increments position value by one. Добавляет в массив первый элемент из переданной коллекции, на указанную позицию и увеличивает значение position на единицу. Declaration public static void AddFirst<T>(this T[] array, ref long position, IList<T> elements) Parameters Type Name Description T[] array The array to add the element to. Массив в который необходимо добавить элемент. Int64 position Reference to the position to which the element will be added. Ссылка на позицию, в которую будет добавлен элемент. IList <T> elements List, the first element of which will be added to the array. Список, первый элемент которого будет добавлен в массив. Type Parameters Name Description T Array element type. Тип элементов массива. | Improve this Doc View Source AddFirstAndReturnConstant<TElement, TReturnConstant>(TElement[], ref Int64, IList<TElement>, TReturnConstant) Adds the first element from the passed collection to the array, at the specified position, increments position value by one and returns the value of the passed constant. Добавляет в массив первый элемент из переданной коллекции, на указанную позицию, увеличивает значение position на единицу и возвращает значение переданной константы. Declaration public static TReturnConstant AddFirstAndReturnConstant<TElement, TReturnConstant>(this TElement[] array, ref long position, IList<TElement> elements, TReturnConstant returnConstant) Parameters Type Name Description TElement[] array The array to add the element to. Массив в который необходимо добавить элемент. Int64 position Reference to the position to which the element will be added. Ссылка на позицию, в которую будет добавлен элемент. IList <TElement> elements List, the first element of which will be added to the array. Список, первый элемент которого будет добавлен в массив. TReturnConstant returnConstant The constant value that will be returned. Значение константы, которое будет возвращено. Returns Type Description TReturnConstant The constant value passed as an argument. Значение константы, переданное в качестве аргумента. Type Parameters Name Description TElement The array element type. Тип элемента массива. TReturnConstant Type of return constant. Тип возвращаемой константы. | Improve this Doc View Source AddSkipFirst<T>(T[], ref Int64, IList<T>) Adding in array all elements of the collection, skipping the first position and increments position value by one. Добавляет в массив все элементы коллекции, пропуская первую позицию и увеличивает значение position на единицу. Declaration public static void AddSkipFirst<T>(this T[] array, ref long position, IList<T> elements) Parameters Type Name Description T[] array The array to add items to. Массив в который необходимо добавить элементы. Int64 position Reference to the position from which to start adding elements. Ссылка на позицию, с которой начинается добавление элементов. IList <T> elements List, whose elements will be added to the array. Список, элементы которого будут добавленны в массив. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source AddSkipFirst<T>(T[], ref Int64, IList<T>, Int32) Adding in array all but the first element, skipping a specified number of positions and increments position value by one. Добавляет в массив все элементы коллекции, кроме первого, пропуская определенное количество позиций и увеличивает значение position на единицу. Declaration public static void AddSkipFirst<T>(this T[] array, ref long position, IList<T> elements, int skip) Parameters Type Name Description T[] array The array to add items to. Массив в который необходимо добавить элементы. Int64 position Reference to the position from which to start adding elements. Ссылка на позицию, с которой начинается добавление элементов. IList <T> elements List, whose elements will be added to the array. Список, элементы которого будут добавленны в массив. Int32 skip Number of elements to skip. Количество пропускаемых элементов. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source AddSkipFirstAndReturnConstant<TElement, TReturnConstant>(TElement[], ref Int64, IList<TElement>, TReturnConstant) Adding in array all elements of the collection, skipping the first position, increments position value by one and returns the value of the passed constant. Добавляет в массив все элементы коллекции, пропуская первую позицию, увеличивает значение position на единицу и возвращает значение переданной константы. Declaration public static TReturnConstant AddSkipFirstAndReturnConstant<TElement, TReturnConstant>(this TElement[] array, ref long position, IList<TElement> elements, TReturnConstant returnConstant) Parameters Type Name Description TElement[] array The array to add items to. Массив в который необходимо добавить элементы. Int64 position Reference to the position from which to start adding elements. Ссылка на позицию, с которой начинается добавление элементов. IList <TElement> elements List, whose elements will be added to the array. Список, элементы которого будут добавленны в массив. TReturnConstant returnConstant The constant value that will be returned. Значение константы, которое будет возвращено. Returns Type Description TReturnConstant The constant value passed as an argument. Значение константы, переданное в качестве аргумента. Type Parameters Name Description TElement The array element type. Тип элемента массива. TReturnConstant Type of return constant. Тип возвращаемой константы. | Improve this Doc View Source Clone<T>(T[]) Copying of elements from one array to another array. Копирует элементы из одного массива в другой массив. Declaration public static T[] Clone<T>(this T[] array) Parameters Type Name Description T[] array The array to copy. Массив который необходимо скопировать. Returns Type Description T[] Copy of the array. Копию массива. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source GetElementOrDefault<T>(T[], Int32) Checks if an array exists, if so, checks the array length using the index variable type int, and if the array length is greater than the index - return array[index], otherwise - default value. Проверяет, существует ли массив, если да - идет проверка длины массива с помощью переменной index, и если длина массива больше индекса - возвращает array[index], иначе - значение по умолчанию. Declaration public static T GetElementOrDefault<T>(this T[] array, int index) Parameters Type Name Description T[] array Array that will participate in verification. Массив который будет учавствовать в проверке. Int32 index Number type int to compare. Число типа int для сравнения. Returns Type Description T Array element or default value. Элемент массива или же значение по умолчанию. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source GetElementOrDefault<T>(T[], Int64) Сhecks whether the array exists, if so, checks the array length using the index variable type long, and if the array length is greater than the index - return array[index], otherwise - default value. Проверяет, существует ли массив, если да - идет проверка длины массива с помощью переменной index, и если длина массива больше индекса - возвращает array[index], иначе - значение по умолчанию. Declaration public static T GetElementOrDefault<T>(this T[] array, long index) Parameters Type Name Description T[] array Array that will participate in verification. Массив который будет учавствовать в проверке. Int64 index Number type long to compare. Число типа long для сравнения. Returns Type Description T Array element or default value. Элемент массива или же значение по умолчанию. Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source ShiftRight<T>(T[]) Shifts all the elements of the array by one position to the right. Сдвигает вправо все элементы массива на одну позицию. Declaration public static IList<T> ShiftRight<T>(this T[] array) Parameters Type Name Description T[] array The array to copy from. Массив для копирования. Returns Type Description IList <T> Array with a shift of elements by one position. Массив со сдвигом элементов на одну позицию. Type Parameters Name Description T The array item type. Тип элементов массива. | Improve this Doc View Source ShiftRight<T>(T[], Int64) Shifts all elements of the array to the right by the specified number of elements. Сдвигает вправо все элементы массива на указанное количество элементов. Declaration public static IList<T> ShiftRight<T>(this T[] array, long shift) Parameters Type Name Description T[] array The array to copy from. Массив для копирования. Int64 shift The number of items to shift. Количество сдвигаемых элементов. Returns Type Description IList <T> If the value of the shift variable is less than zero - an exception is thrown, but if the value of the shift variable is 0 - an exact copy of the array is returned. Otherwise, an array is returned with the shift of the elements. Если значение переменной shift меньше нуля - выбрасывается исключение , если же значение переменной shift равно 0 - возвращается точная копия массива. Иначе возвращается массив со сдвигом элементов. Type Parameters Name Description T The array item type. Тип элементов массива. | Improve this Doc View Source TryGetElement<T>(T[], Int32, out T) Checks whether the array exist, if so, checks the array length using the index varible type int, and if the array length is greater than the index, set the element variable to array[index] and return true . Проверяет, существует ли массив, если да, то идет проверка длины массива с помощью переменной index типа int, и если длина массива больше значения index, устанавливает значение переменной element - array[index] и возвращает true . Declaration public static bool TryGetElement<T>(this T[] array, int index, out T element) Parameters Type Name Description T[] array Array that will participate in verification. Массив который будет учавствовать в проверке. Int32 index Number type int to compare. Число типа int для сравнения. T element Passing the argument by reference, if successful, it will take the value array[index] otherwise default value. Передает аргумент по ссылке, в случае успеха он примет значение array[index] в противном случае значение по умолчанию. Returns Type Description Boolean true if successful otherwise false . true в случае успеха, в противном случае false . Type Parameters Name Description T Array elements type. Тип элементов массива. | Improve this Doc View Source TryGetElement<T>(T[], Int64, out T) Checks whether the array exist, if so, checks the array length using the index varible type long, and if the array length is greater than the index, set the element variable to array[index] and return true . Проверяет, существует ли массив, если да, то идет проверка длины массива с помощью переменной index типа long, и если длина массива больше значения index, устанавливает значение переменной element - array[index] и возвращает true . Declaration public static bool TryGetElement<T>(this T[] array, long index, out T element) Parameters Type Name Description T[] array Array that will participate in verification. Массив который будет учавствовать в проверке. Int64 index Number type long to compare. Число типа long для сравнения. T element Passing the argument by reference, if successful, it will take the value array[index] otherwise default value. Передает аргумент по ссылке, в случае успеха он примет значение array[index] в противном случае значение по умолчанию. Returns Type Description Boolean true if successful otherwise false . true в случае успеха, в противном случае false Type Parameters Name Description T Array elements type. Тип элементов массива."
  },
  "api/Platform.Collections.Arrays.html": {
    "href": "api/Platform.Collections.Arrays.html",
    "title": "Namespace Platform.Collections.Arrays | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Arrays Classes ArrayFiller<TElement> Represents an TElement[] array filler. Представляет заполнитель массива TElement[] . ArrayFiller<TElement, TReturnConstant> Represents TElement[] array filler with additional methods that return a given constant of type . Представляет заполнитель массива TElement[] c дополнительными методами, возвращающими заданную константу типа . ArrayPool Represents a set of wrapper methods over ArrayPool<T> class methods to simplify access to them. Представляет набор методов обёрток над методами класса ArrayPool<T> для упрощения доступа к ним. ArrayPool<T> Represents a set of arrays ready for reuse. Представляет собой набор массивов готовых к повторному использованию. ArrayString<T> CharArrayExtensions GenericArrayExtensions Represents a set of extension methods for a T[] array. Представляет набор методов расширения для массива T[] ."
  },
  "api/Platform.Collections.BitString.html": {
    "href": "api/Platform.Collections.BitString.html",
    "title": "Class BitString | LinksPlatform's Platform.Collections Library",
    "keywords": "Class BitString Inheritance Object BitString Namespace : Platform.Collections Assembly : Platform.Collections.dll Syntax public class BitString : IEquatable<BitString> Remarks А что если хранить карту значений, где каждый бит будет означать присутствует ли блок в 64 бит в массиве значений. 64 бита по 0 бит, будут означать отсутствие 64-х блоков по 64 бита. Т.е. упаковка 512 байт в 8 байт. Подобный принцип можно применять и к 64-ём блокам и т.п. По сути это карта значений. С помощью которой можно быстро проверять есть ли значения непосредственно далее (ниже по уровню). Или как таблица виртуальной памяти где номер блока означает его присутствие и адрес. Constructors | Improve this Doc View Source BitString(BitString) Declaration public BitString(BitString other) Parameters Type Name Description BitString other | Improve this Doc View Source BitString(Int64) Declaration public BitString(long length) Parameters Type Name Description Int64 length | Improve this Doc View Source BitString(Int64, Boolean) Declaration public BitString(long length, bool defaultValue) Parameters Type Name Description Int64 length Boolean defaultValue Properties | Improve this Doc View Source Item[Int64] Declaration public bool this[long index] { get; set; } Parameters Type Name Description Int64 index Property Value Type Description Boolean | Improve this Doc View Source Length Declaration public long Length { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source Add(Int64) Declaration public bool Add(long index) Parameters Type Name Description Int64 index Returns Type Description Boolean | Improve this Doc View Source And(BitString) Declaration public BitString And(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source CountCommonBits(BitString) Declaration public long CountCommonBits(BitString other) Parameters Type Name Description BitString other Returns Type Description Int64 | Improve this Doc View Source CountSetBits() Declaration public long CountSetBits() Returns Type Description Int64 | Improve this Doc View Source Equals(BitString) Declaration public bool Equals(BitString other) Parameters Type Name Description BitString other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source Get(Int64) Declaration public bool Get(long index) Parameters Type Name Description Int64 index Returns Type Description Boolean | Improve this Doc View Source GetBitMaskFromIndex(Int64) Declaration public static long GetBitMaskFromIndex(long index) Parameters Type Name Description Int64 index Returns Type Description Int64 | Improve this Doc View Source GetCommonBorders(BitString, BitString, out UInt64, out UInt64) Declaration public static void GetCommonBorders(BitString left, BitString right, out ulong from, out ulong to) Parameters Type Name Description BitString left BitString right UInt64 from UInt64 to | Improve this Doc View Source GetCommonIndices(BitString) Declaration public List<long> GetCommonIndices(BitString other) Parameters Type Name Description BitString other Returns Type Description List < Int64 > | Improve this Doc View Source GetCommonInnerBorders(BitString, BitString, out Int64, out Int64) Declaration public static void GetCommonInnerBorders(BitString left, BitString right, out long from, out long to) Parameters Type Name Description BitString left BitString right Int64 from Int64 to | Improve this Doc View Source GetCommonOuterBorders(BitString, BitString, out Int32, out Int32) Declaration public static void GetCommonOuterBorders(BitString left, BitString right, out int from, out int to) Parameters Type Name Description BitString left BitString right Int32 from Int32 to | Improve this Doc View Source GetCommonOuterBorders(BitString, BitString, out Int64, out Int64) Declaration public static void GetCommonOuterBorders(BitString left, BitString right, out long from, out long to) Parameters Type Name Description BitString left BitString right Int64 from Int64 to | Improve this Doc View Source GetCommonUInt64Indices(BitString) Declaration public List<ulong> GetCommonUInt64Indices(BitString other) Parameters Type Name Description BitString other Returns Type Description List < UInt64 > | Improve this Doc View Source GetFirstCommonBitIndex(BitString) Declaration public long GetFirstCommonBitIndex(BitString other) Parameters Type Name Description BitString other Returns Type Description Int64 | Improve this Doc View Source GetFirstSetBitIndex() Declaration public long GetFirstSetBitIndex() Returns Type Description Int64 | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source GetLastCommonBitIndex(BitString) Declaration public long GetLastCommonBitIndex(BitString other) Parameters Type Name Description BitString other Returns Type Description Int64 | Improve this Doc View Source GetLastSetBitIndex() Declaration public long GetLastSetBitIndex() Returns Type Description Int64 | Improve this Doc View Source GetSetIndices() Declaration public List<long> GetSetIndices() Returns Type Description List < Int64 > | Improve this Doc View Source GetSetUInt64Indices() Declaration public List<ulong> GetSetUInt64Indices() Returns Type Description List < UInt64 > | Improve this Doc View Source GetWordIndexFromIndex(Int64) Declaration public static long GetWordIndexFromIndex(long index) Parameters Type Name Description Int64 index Returns Type Description Int64 | Improve this Doc View Source GetWordsCountFromIndex(Int64) Declaration public static long GetWordsCountFromIndex(long index) Parameters Type Name Description Int64 index Returns Type Description Int64 | Improve this Doc View Source HaveCommonBits(BitString) Declaration public bool HaveCommonBits(BitString other) Parameters Type Name Description BitString other Returns Type Description Boolean | Improve this Doc View Source Not() Declaration public BitString Not() Returns Type Description BitString | Improve this Doc View Source Or(BitString) Declaration public BitString Or(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source ParallelAnd(BitString) Declaration public BitString ParallelAnd(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source ParallelNot() Declaration public BitString ParallelNot() Returns Type Description BitString | Improve this Doc View Source ParallelOr(BitString) Declaration public BitString ParallelOr(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source ParallelVectorAnd(BitString) Declaration public BitString ParallelVectorAnd(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source ParallelVectorNot() Declaration public BitString ParallelVectorNot() Returns Type Description BitString | Improve this Doc View Source ParallelVectorOr(BitString) Declaration public BitString ParallelVectorOr(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source ParallelVectorXor(BitString) Declaration public BitString ParallelVectorXor(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source ParallelXor(BitString) Declaration public BitString ParallelXor(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source Reset(Int64) Declaration public void Reset(long index) Parameters Type Name Description Int64 index | Improve this Doc View Source ResetAll() Declaration public void ResetAll() | Improve this Doc View Source Set(Int64) Declaration public void Set(long index) Parameters Type Name Description Int64 index | Improve this Doc View Source Set(Int64, Boolean) Declaration public void Set(long index, bool value) Parameters Type Name Description Int64 index Boolean value | Improve this Doc View Source SetAll() Declaration public void SetAll() | Improve this Doc View Source SetAll(Boolean) Declaration public void SetAll(bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source TryShrinkBorders() Declaration public bool TryShrinkBorders() Returns Type Description Boolean | Improve this Doc View Source VectorAnd(BitString) Declaration public BitString VectorAnd(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source VectorNot() Declaration public BitString VectorNot() Returns Type Description BitString | Improve this Doc View Source VectorOr(BitString) Declaration public BitString VectorOr(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source VectorXor(BitString) Declaration public BitString VectorXor(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString | Improve this Doc View Source Xor(BitString) Declaration public BitString Xor(BitString other) Parameters Type Name Description BitString other Returns Type Description BitString Extension Methods BitStringExtensions.SetRandomBits(BitString)"
  },
  "api/Platform.Collections.BitStringExtensions.html": {
    "href": "api/Platform.Collections.BitStringExtensions.html",
    "title": "Class BitStringExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class BitStringExtensions Inheritance Object BitStringExtensions Namespace : Platform.Collections Assembly : Platform.Collections.dll Syntax public static class BitStringExtensions : object Methods | Improve this Doc View Source SetRandomBits(BitString) Declaration public static void SetRandomBits(this BitString string) Parameters Type Name Description BitString string"
  },
  "api/Platform.Collections.Concurrent.ConcurrentQueueExtensions.html": {
    "href": "api/Platform.Collections.Concurrent.ConcurrentQueueExtensions.html",
    "title": "Class ConcurrentQueueExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ConcurrentQueueExtensions Inheritance Object ConcurrentQueueExtensions Namespace : Platform.Collections.Concurrent Assembly : Platform.Collections.dll Syntax public static class ConcurrentQueueExtensions : object Methods | Improve this Doc View Source DequeueAll<T>(ConcurrentQueue<T>) Declaration public static IEnumerable<T> DequeueAll<T>(this ConcurrentQueue<T> queue) Parameters Type Name Description ConcurrentQueue <T> queue Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Platform.Collections.Concurrent.ConcurrentStackExtensions.html": {
    "href": "api/Platform.Collections.Concurrent.ConcurrentStackExtensions.html",
    "title": "Class ConcurrentStackExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ConcurrentStackExtensions Inheritance Object ConcurrentStackExtensions Namespace : Platform.Collections.Concurrent Assembly : Platform.Collections.dll Syntax public static class ConcurrentStackExtensions : object Methods | Improve this Doc View Source PeekOrDefault<T>(ConcurrentStack<T>) Declaration public static T PeekOrDefault<T>(this ConcurrentStack<T> stack) Parameters Type Name Description ConcurrentStack <T> stack Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source PopOrDefault<T>(ConcurrentStack<T>) Declaration public static T PopOrDefault<T>(this ConcurrentStack<T> stack) Parameters Type Name Description ConcurrentStack <T> stack Returns Type Description T Type Parameters Name Description T"
  },
  "api/Platform.Collections.Concurrent.html": {
    "href": "api/Platform.Collections.Concurrent.html",
    "title": "Namespace Platform.Collections.Concurrent | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Concurrent Classes ConcurrentQueueExtensions ConcurrentStackExtensions"
  },
  "api/Platform.Collections.EnsureExtensions.html": {
    "href": "api/Platform.Collections.EnsureExtensions.html",
    "title": "Class EnsureExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class EnsureExtensions Inheritance Object EnsureExtensions Namespace : Platform.Collections Assembly : Platform.Collections.dll Syntax public static class EnsureExtensions : object Methods | Improve this Doc View Source ArgumentNotEmpty<T>(EnsureAlwaysExtensionRoot, ICollection<T>) Declaration public static void ArgumentNotEmpty<T>(this EnsureAlwaysExtensionRoot root, ICollection<T> argument) Parameters Type Name Description EnsureAlwaysExtensionRoot root ICollection <T> argument Type Parameters Name Description T | Improve this Doc View Source ArgumentNotEmpty<T>(EnsureAlwaysExtensionRoot, ICollection<T>, String) Declaration public static void ArgumentNotEmpty<T>(this EnsureAlwaysExtensionRoot root, ICollection<T> argument, string argumentName) Parameters Type Name Description EnsureAlwaysExtensionRoot root ICollection <T> argument String argumentName Type Parameters Name Description T | Improve this Doc View Source ArgumentNotEmpty<T>(EnsureAlwaysExtensionRoot, ICollection<T>, String, String) Declaration public static void ArgumentNotEmpty<T>(this EnsureAlwaysExtensionRoot root, ICollection<T> argument, string argumentName, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root ICollection <T> argument String argumentName String message Type Parameters Name Description T | Improve this Doc View Source ArgumentNotEmpty<T>(EnsureOnDebugExtensionRoot, ICollection<T>) Declaration public static void ArgumentNotEmpty<T>(this EnsureOnDebugExtensionRoot root, ICollection<T> argument) Parameters Type Name Description EnsureOnDebugExtensionRoot root ICollection <T> argument Type Parameters Name Description T | Improve this Doc View Source ArgumentNotEmpty<T>(EnsureOnDebugExtensionRoot, ICollection<T>, String) Declaration public static void ArgumentNotEmpty<T>(this EnsureOnDebugExtensionRoot root, ICollection<T> argument, string argumentName) Parameters Type Name Description EnsureOnDebugExtensionRoot root ICollection <T> argument String argumentName Type Parameters Name Description T | Improve this Doc View Source ArgumentNotEmpty<T>(EnsureOnDebugExtensionRoot, ICollection<T>, String, String) Declaration public static void ArgumentNotEmpty<T>(this EnsureOnDebugExtensionRoot root, ICollection<T> argument, string argumentName, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root ICollection <T> argument String argumentName String message Type Parameters Name Description T | Improve this Doc View Source ArgumentNotEmptyAndNotWhiteSpace(EnsureAlwaysExtensionRoot, String) Declaration public static void ArgumentNotEmptyAndNotWhiteSpace(this EnsureAlwaysExtensionRoot root, string argument) Parameters Type Name Description EnsureAlwaysExtensionRoot root String argument | Improve this Doc View Source ArgumentNotEmptyAndNotWhiteSpace(EnsureAlwaysExtensionRoot, String, String) Declaration public static void ArgumentNotEmptyAndNotWhiteSpace(this EnsureAlwaysExtensionRoot root, string argument, string argumentName) Parameters Type Name Description EnsureAlwaysExtensionRoot root String argument String argumentName | Improve this Doc View Source ArgumentNotEmptyAndNotWhiteSpace(EnsureAlwaysExtensionRoot, String, String, String) Declaration public static void ArgumentNotEmptyAndNotWhiteSpace(this EnsureAlwaysExtensionRoot root, string argument, string argumentName, string message) Parameters Type Name Description EnsureAlwaysExtensionRoot root String argument String argumentName String message | Improve this Doc View Source ArgumentNotEmptyAndNotWhiteSpace(EnsureOnDebugExtensionRoot, String) Declaration public static void ArgumentNotEmptyAndNotWhiteSpace(this EnsureOnDebugExtensionRoot root, string argument) Parameters Type Name Description EnsureOnDebugExtensionRoot root String argument | Improve this Doc View Source ArgumentNotEmptyAndNotWhiteSpace(EnsureOnDebugExtensionRoot, String, String) Declaration public static void ArgumentNotEmptyAndNotWhiteSpace(this EnsureOnDebugExtensionRoot root, string argument, string argumentName) Parameters Type Name Description EnsureOnDebugExtensionRoot root String argument String argumentName | Improve this Doc View Source ArgumentNotEmptyAndNotWhiteSpace(EnsureOnDebugExtensionRoot, String, String, String) Declaration public static void ArgumentNotEmptyAndNotWhiteSpace(this EnsureOnDebugExtensionRoot root, string argument, string argumentName, string message) Parameters Type Name Description EnsureOnDebugExtensionRoot root String argument String argumentName String message"
  },
  "api/Platform.Collections.html": {
    "href": "api/Platform.Collections.html",
    "title": "Namespace Platform.Collections | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections Classes BitString BitStringExtensions EnsureExtensions ICollectionExtensions Presents a set of methods for working with collections. Представляет набор методов для работы с коллекциями. IDictionaryExtensions StringExtensions"
  },
  "api/Platform.Collections.ICollectionExtensions.html": {
    "href": "api/Platform.Collections.ICollectionExtensions.html",
    "title": "Class ICollectionExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ICollectionExtensions Presents a set of methods for working with collections. Представляет набор методов для работы с коллекциями. Inheritance Object ICollectionExtensions Namespace : Platform.Collections Assembly : Platform.Collections.dll Syntax public static class ICollectionExtensions : object Methods | Improve this Doc View Source AllEqualToDefault<T>(ICollection<T>) Declaration public static bool AllEqualToDefault<T>(this ICollection<T> collection) Parameters Type Name Description ICollection <T> collection Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source IsNullOrEmpty<T>(ICollection<T>) Declaration public static bool IsNullOrEmpty<T>(this ICollection<T> collection) Parameters Type Name Description ICollection <T> collection Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/Platform.Collections.IDictionaryExtensions.html": {
    "href": "api/Platform.Collections.IDictionaryExtensions.html",
    "title": "Class IDictionaryExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class IDictionaryExtensions Inheritance Object IDictionaryExtensions Namespace : Platform.Collections Assembly : Platform.Collections.dll Syntax public static class IDictionaryExtensions : object Methods | Improve this Doc View Source GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Declaration public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> valueFactory) Parameters Type Name Description IDictionary <TKey, TValue> dictionary TKey key Func <TKey, TValue> valueFactory Returns Type Description TValue Type Parameters Name Description TKey TValue | Improve this Doc View Source GetOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Declaration public static TValue GetOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description IDictionary <TKey, TValue> dictionary TKey key Returns Type Description TValue Type Parameters Name Description TKey TValue"
  },
  "api/Platform.Collections.Lists.CharIListExtensions.html": {
    "href": "api/Platform.Collections.Lists.CharIListExtensions.html",
    "title": "Class CharIListExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class CharIListExtensions Inheritance Object CharIListExtensions Namespace : Platform.Collections.Lists Assembly : Platform.Collections.dll Syntax public static class CharIListExtensions : object Methods | Improve this Doc View Source ContentEqualTo(IList<Char>, IList<Char>) Compares each element in the list for equality. Сравнивает на равенство каждый элемент списка. Declaration public static bool ContentEqualTo(this IList<char> left, IList<char> right) Parameters Type Name Description IList < Char > left The first compared list. Первый список для сравнения. IList < Char > right The second compared list. Второй список для сравнения. Returns Type Description Boolean If at least one element of one list is not equal to the corresponding element from another list returns false, otherwise - true. Если как минимум один элемент одного списка не равен соответствующему элементу из другого списка возвращает false, иначе - true. | Improve this Doc View Source EqualTo(IList<Char>, IList<Char>) Compares two lists for equality. Сравнивает два списка на равенство. Declaration public static bool EqualTo(this IList<char> left, IList<char> right) Parameters Type Name Description IList < Char > left The first compared list. Первый список для сравнения. IList < Char > right The second compared list. Второй список для сравнения. Returns Type Description Boolean True, if the passed lists are equal to each other оtherwise false. True, если переданные списки равны друг другу, иначе false. | Improve this Doc View Source GenerateHashCode(IList<Char>) Generates a hash code for the entire list based on the values of its elements. Генерирует хэш-код всего списка, на основе значений его элементов. Declaration public static int GenerateHashCode(this IList<char> list) Parameters Type Name Description IList < Char > list The list to be hashed. Список для хеширования. Returns Type Description Int32 The hash code of the list. Хэш-код списка. Remarks Based on https://github.com/Microsoft/referencesource/blob/3b1eaf5203992df69de44c783a3eda37d3d4cd10/mscorlib/system/string.cs#L833"
  },
  "api/Platform.Collections.Lists.html": {
    "href": "api/Platform.Collections.Lists.html",
    "title": "Namespace Platform.Collections.Lists | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Lists Classes CharIListExtensions IListComparer<T> IListEqualityComparer<T> IListExtensions ListFiller<TElement, TReturnConstant>"
  },
  "api/Platform.Collections.Lists.IListComparer-1.html": {
    "href": "api/Platform.Collections.Lists.IListComparer-1.html",
    "title": "Class IListComparer<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class IListComparer<T> Inheritance Object IListComparer<T> Namespace : Platform.Collections.Lists Assembly : Platform.Collections.dll Syntax public class IListComparer<T> : IComparer<IList<T>> Type Parameters Name Description T Methods | Improve this Doc View Source Compare(IList<T>, IList<T>) Compares two lists. Сравнивает два списка. Declaration public int Compare(IList<T> left, IList<T> right) Parameters Type Name Description IList <T> left The first compared list. Первый список для сравнения. IList <T> right The second compared list. Второй список для сравнения. Returns Type Description Int32 A signed integer that indicates the relative values of left and right lists' elements, as shown in the following table. Value Meaning Is less than zero First non equal element of left list is less than first not equal element of right list. Zero All elements of left list equals to all elements of right list. Is greater than zero First non equal element of left list is greater than first not equal element of right list. Целое число со знаком, которое указывает относительные значения элементов списков left и right как показано в следующей таблице. Значение Смысл Меньше нуля Первый не равный элемент left списка меньше первого неравного элемента right списка. Ноль Все элементы left списка равны всем элементам right списка. Больше нуля Первый не равный элемент left списка больше первого неравного элемента right списка."
  },
  "api/Platform.Collections.Lists.IListEqualityComparer-1.html": {
    "href": "api/Platform.Collections.Lists.IListEqualityComparer-1.html",
    "title": "Class IListEqualityComparer<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class IListEqualityComparer<T> Inheritance Object IListEqualityComparer<T> Namespace : Platform.Collections.Lists Assembly : Platform.Collections.dll Syntax public class IListEqualityComparer<T> : IEqualityComparer<IList<T>> Type Parameters Name Description T Methods | Improve this Doc View Source Equals(IList<T>, IList<T>) Compares two lists for equality. Сравнивает два списка на равенство. Declaration public bool Equals(IList<T> left, IList<T> right) Parameters Type Name Description IList <T> left The first compared list. Первый список для сравнения. IList <T> right The second compared list. Второй список для сравнения. Returns Type Description Boolean If the passed lists are equal to each other, true is returned, оtherwise false. Если переданные списки равны друг другу, возвращается true, иначе же false. | Improve this Doc View Source GetHashCode(IList<T>) Generates a hash code for the entire list based on the values of its elements. Генерирует хэш-код всего списка, на основе значений его элементов. Declaration public int GetHashCode(IList<T> list) Parameters Type Name Description IList <T> list Hash list. Список для хеширования. Returns Type Description Int32 The hash code of the list. Хэш-код списка."
  },
  "api/Platform.Collections.Lists.IListExtensions.html": {
    "href": "api/Platform.Collections.Lists.IListExtensions.html",
    "title": "Class IListExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class IListExtensions Inheritance Object IListExtensions Namespace : Platform.Collections.Lists Assembly : Platform.Collections.dll Syntax public static class IListExtensions : object Methods | Improve this Doc View Source AddAll<T>(IList<T>, IList<T>) Adds all elements from other list to this list. Добавляет все элементы из другого списка в этот список. Declaration public static void AddAll<T>(this IList<T> list, IList<T> elements) Parameters Type Name Description IList <T> list The list to add the values to. Список в который нужно добавить значения. IList <T> elements The list of values to add. Список значений которые необходимо добавить. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddAllAndReturnTrue<T>(IList<T>, IList<T>) Adds all elements from other list to this list and returns true. Добавляет все элементы из другого списка в этот список и возвращает true. Declaration public static bool AddAllAndReturnTrue<T>(this IList<T> list, IList<T> elements) Parameters Type Name Description IList <T> list The list to add the values to. Список в который нужно добавить значения. IList <T> elements List of values to add. Список значений которые необходимо добавить. Returns Type Description Boolean True value in any case. Значение true в любом случае. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddAndReturnTrue<T>(IList<T>, T) Adds a value to the list. Добавляет значение в список. Declaration public static bool AddAndReturnTrue<T>(this IList<T> list, T element) Parameters Type Name Description IList <T> list The list to add the value to. Список в который нужно добавить значение. T element The item to add to the list. Элемент который нужно добавить в список. Returns Type Description Boolean True value in any case. Значение true в любом случае. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddFirst<T>(IList<T>, IList<T>) Adds a value to the list at the first index. Добавляет значение в список по первому индексу. Declaration public static void AddFirst<T>(this IList<T> list, IList<T> elements) Parameters Type Name Description IList <T> list The list to add the value to. Список в который нужно добавить значение. IList <T> elements The item to add to the list. Элемент который нужно добавить в список Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddFirstAndReturnTrue<T>(IList<T>, IList<T>) Adds the value with first index from other list to this list. Добавляет в этот список значение с первым индексом из другого списка. Declaration public static bool AddFirstAndReturnTrue<T>(this IList<T> list, IList<T> elements) Parameters Type Name Description IList <T> list The list to add the value to. Список в который нужно добавить значение. IList <T> elements The item to add to the list. Элемент который нужно добавить в список Returns Type Description Boolean True value in any case. Значение true в любом случае. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddSkipFirst<T>(IList<T>, IList<T>) Adds values to the list skipping the first element. Добавляет значения в список пропуская первый элемент. Declaration public static void AddSkipFirst<T>(this IList<T> list, IList<T> elements) Parameters Type Name Description IList <T> list The list to add the values to. Список в который нужно добавить значения. IList <T> elements List of values to add. Список значений которые необходимо добавить. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddSkipFirst<T>(IList<T>, IList<T>, Int32) Adds values to the list skipping a specified number of first elements. Добавляет в список значения пропуская определенное количество первых элементов. Declaration public static void AddSkipFirst<T>(this IList<T> list, IList<T> elements, int skip) Parameters Type Name Description IList <T> list The list to add the values to. Список в который нужно добавить значения. IList <T> elements List of values to add. Список значений которые необходимо добавить. Int32 skip Number of elements to skip. Количество пропускаемых элементов. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source AddSkipFirstAndReturnTrue<T>(IList<T>, IList<T>) Adds values to the list skipping the first element. Добавляет значения в список пропуская первый элемент. Declaration public static bool AddSkipFirstAndReturnTrue<T>(this IList<T> list, IList<T> elements) Parameters Type Name Description IList <T> list The list to add the values to. Список в который нужно добавить значения. IList <T> elements The list of values to add. Список значений которые необходимо добавить. Returns Type Description Boolean True value in any case. Значение true в любом случае. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source CompareTo<T>(IList<T>, IList<T>) Compares two lists. Сравнивает два списка. Declaration public static int CompareTo<T>(this IList<T> left, IList<T> right) Parameters Type Name Description IList <T> left The first compared list. Первый список для сравнения. IList <T> right The second compared list. Второй список для сравнения. Returns Type Description Int32 A signed integer that indicates the relative values of left and right lists' elements, as shown in the following table. Value Meaning Is less than zero First non equal element of left list is less than first not equal element of right list. Zero All elements of left list equals to all elements of right list. Is greater than zero First non equal element of left list is greater than first not equal element of right list. Целое число со знаком, которое указывает относительные значения элементов списков left и right как показано в следующей таблице. Значение Смысл Меньше нуля Первый не равный элемент left списка меньше первого неравного элемента right списка. Ноль Все элементы left списка равны всем элементам right списка. Больше нуля Первый не равный элемент left списка больше первого неравного элемента right списка. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source ContentEqualTo<T>(IList<T>, IList<T>) Compares each element in the list for identity. Сравнивает на равенство каждый элемент списка. Declaration public static bool ContentEqualTo<T>(this IList<T> left, IList<T> right) Parameters Type Name Description IList <T> left The first compared list. Первый список для сравнения. IList <T> right The second compared list. Второй список для сравнения. Returns Type Description Boolean If at least one element of one list is not equal to the corresponding element from another list returns false, otherwise - true. Если как минимум один элемент одного списка не равен соответствующему элементу из другого списка возвращает false, иначе - true. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source EqualTo<T>(IList<T>, IList<T>) Compares two lists for equality. Сравнивает два списка на равенство. Declaration public static bool EqualTo<T>(this IList<T> left, IList<T> right) Parameters Type Name Description IList <T> left The first compared list. Первый список для сравнения. IList <T> right The second compared list. Второй список для сравнения. Returns Type Description Boolean If the passed lists are equal to each other, true is returned, оtherwise false. Если переданные списки равны друг другу, возвращается true, иначе же false. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source EqualTo<T>(IList<T>, IList<T>, Func<IList<T>, IList<T>, Boolean>) Compares two lists for equality. Сравнивает два списка на равенство. Declaration public static bool EqualTo<T>(this IList<T> left, IList<T> right, Func<IList<T>, IList<T>, bool> contentEqualityComparer) Parameters Type Name Description IList <T> left The first compared list. Первый список для проверки. IList <T> right The second compared list. Второй список для сравнения. Func < IList <T>, IList <T>, Boolean > contentEqualityComparer Function to test two lists for their content equality. Функция для проверки двух списков на равенство их содержимого. Returns Type Description Boolean If the passed lists are equal to each other, true is returned, оtherwise false. Если переданные списки равны друг другу, возвращается true, иначе же false. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source ForEach<T>(IList<T>, Action<T>) Executes the passed action for each item in the list. Выполняет переданное действие для каждого элемента в списке. Declaration public static void ForEach<T>(this IList<T> list, Action<T> action) Parameters Type Name Description IList <T> list The list of elements for which the action will be executed. Список элементов для которых будет выполняться действие. Action <T> action A function that will be called for each element of the list. Функция которая будет вызываться для каждого элемента списка. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source GenerateHashCode<T>(IList<T>) Generates a hash code for the entire list based on the values of its elements. Генерирует хэш-код всего списка, на основе значений его элементов. Declaration public static int GenerateHashCode<T>(this IList<T> list) Parameters Type Name Description IList <T> list Hash list. Список для хеширования. Returns Type Description Int32 The hash code of the list. Хэш-код списка. Type Parameters Name Description T The list's item type. Тип элементов списка. Remarks Based on http://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode | Improve this Doc View Source GetCountOrZero<T>(IList<T>) Reads the number of elements in the list. Считывает число элементов списка. Declaration public static int GetCountOrZero<T>(this IList<T> list) Parameters Type Name Description IList <T> list The checked list. Список для проверки. Returns Type Description Int32 The number of items contained in the list or 0. Число элементов содержащихся в списке или же 0. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source GetElementOrDefault<T>(IList<T>, Int32) Gets the element from specified index if the list is not null and the index is within the list's boundaries, otherwise it returns default value of type T. Получает элемент из указанного индекса, если список не является null и индекс находится в границах списка, в противном случае он возвращает значение по умолчанию типа T. Declaration public static T GetElementOrDefault<T>(this IList<T> list, int index) Parameters Type Name Description IList <T> list The checked list. Проверяемый список. Int32 index The index of element. Индекс элемента. Returns Type Description T If the specified index is within list's boundaries, then - list[index], otherwise the default value. Если указанный индекс находится в пределах границ списка, тогда - list[index], иначе же значение по умолчанию. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source ShiftRight<T>(IList<T>) Shifts all the elements of the list by one position to the right. Сдвигает вправо все элементы списка на одну позицию. Declaration public static IList<T> ShiftRight<T>(this IList<T> list) Parameters Type Name Description IList <T> list The list to copy from. Список для копирования. Returns Type Description IList <T> Array with a shift of elements by one position. Массив со сдвигом элементов на одну позицию. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source ShiftRight<T>(IList<T>, Int32) Shifts all elements of the list to the right by the specified number of elements. Сдвигает вправо все элементы списка на указанное количество элементов. Declaration public static IList<T> ShiftRight<T>(this IList<T> list, int shift) Parameters Type Name Description IList <T> list The list to copy from. Список для копирования. Int32 shift The number of items to shift. Количество сдвигаемых элементов. Returns Type Description IList <T> If the value of the shift variable is less than zero - an exception is thrown, but if the value of the shift variable is 0 - an exact copy of the array is returned. Otherwise, an array is returned with the shift of the elements. Если значение переменной shift меньше нуля - выбрасывается исключение , если же значение переменной shift равно 0 - возвращается точная копия массива. Иначе возвращается массив со сдвигом элементов. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source SkipFirst<T>(IList<T>) Skips one element in the list and builds an array from the remaining elements. Пропускает один элемент списка и составляет из оставшихся элементов массив. Declaration public static T[] SkipFirst<T>(this IList<T> list) Parameters Type Name Description IList <T> list The list to copy from. Список для копирования. Returns Type Description T[] If the list is empty, returns an empty array, otherwise - an array with a missing first element. Если список пуст, возвращает пустой массив, иначе - массив с пропущенным первым элементом. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source SkipFirst<T>(IList<T>, Int32) Skips the specified number of elements in the list and builds an array from the remaining elements. Пропускает указанное количество элементов списка и составляет из оставшихся элементов массив. Declaration public static T[] SkipFirst<T>(this IList<T> list, int skip) Parameters Type Name Description IList <T> list The list to copy from. Список для копирования. Int32 skip The number of items to skip. Количество пропускаемых элементов. Returns Type Description T[] If the list is empty, or the number of skipped elements is greater than the list, returns an empty array, otherwise - an array with the specified number of missing elements. Если список пуст, или количество пропускаемых элементов больше списка - возвращает пустой массив, иначе - массив с указанным количеством пропущенных элементов. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source ToArray<T>(IList<T>) Copies all the elements of the list into an array and returns it. Копирует все элементы списка в массив и возвращает его. Declaration public static T[] ToArray<T>(this IList<T> list) Parameters Type Name Description IList <T> list The list to copy from. Список для копирования. Returns Type Description T[] An array with all the elements of the passed list. Массив со всеми элементами переданного списка. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source ToArray<T>(IList<T>, Func<T, Boolean>) Creates an array by copying all elements from the list that satisfy the predicate. If no list is passed, null is returned. Создаёт массив, копируя из списка все элементы которые удовлетворяют предикату. Если список не передан, возвращается null. Declaration public static T[] ToArray<T>(this IList<T> list, Func<T, bool> predicate) Parameters Type Name Description IList <T> list The list to copy from. Список для копирования. Func <T, Boolean > predicate A function that determines whether an element should be copied. Функция определяющая должен ли копироваться элемент. Returns Type Description T[] An array with copied elements from the list. Массив с скопированными элементами из списка. Type Parameters Name Description T The list's item type. Тип элементов списка. | Improve this Doc View Source TryGetElement<T>(IList<T>, Int32, out T) Checks if a list is passed, checks its length, and if successful, copies the value of list [index] into the element variable. Otherwise, the element variable has a default value. Проверяет, передан ли список, сверяет его длинy и в случае успеха копирует значение list[index] в переменную element. Иначе переменная element имеет значение по умолчанию. Declaration public static bool TryGetElement<T>(this IList<T> list, int index, out T element) Parameters Type Name Description IList <T> list The checked list. Список для проверки. Int32 index The index of element.. Индекс элемента. T element Variable for passing the index value. Переменная для передачи значения индекса. Returns Type Description Boolean True on success, false otherwise. True в случае успеха, иначе false. Type Parameters Name Description T The list's item type. Тип элементов списка."
  },
  "api/Platform.Collections.Lists.ListFiller-2.html": {
    "href": "api/Platform.Collections.Lists.ListFiller-2.html",
    "title": "Class ListFiller<TElement, TReturnConstant> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ListFiller<TElement, TReturnConstant> Inheritance Object ListFiller<TElement, TReturnConstant> Namespace : Platform.Collections.Lists Assembly : Platform.Collections.dll Syntax public class ListFiller<TElement, TReturnConstant> : object Type Parameters Name Description TElement TReturnConstant Constructors | Improve this Doc View Source ListFiller(List<TElement>) Declaration public ListFiller(List<TElement> list) Parameters Type Name Description List <TElement> list | Improve this Doc View Source ListFiller(List<TElement>, TReturnConstant) Initializes a new instance of the ListFiller class. Инициализирует новый экземпляр класса ListFiller. Declaration public ListFiller(List<TElement> list, TReturnConstant returnConstant) Parameters Type Name Description List <TElement> list The list to be filled. Список который будет заполняться. TReturnConstant returnConstant The value for the constant returned by corresponding methods. Значение для константы возвращаемой соответствующими методами. Fields | Improve this Doc View Source _list Declaration protected readonly List<TElement> _list Field Value Type Description List <TElement> | Improve this Doc View Source _returnConstant Declaration protected readonly TReturnConstant _returnConstant Field Value Type Description TReturnConstant Methods | Improve this Doc View Source Add(TElement) Adds an item to the end of the list. Добавляет элемент в конец списка. Declaration public void Add(TElement element) Parameters Type Name Description TElement element Element to add. Добавляемый элемент. | Improve this Doc View Source AddAllAndReturnConstant(IList<TElement>) Adds all elements from other list to this list and returns constant. Добавляет все элементы из другого списка в этот список и возвращает константу. Declaration public TReturnConstant AddAllAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements List of values to add. Список значений которые необходимо добавить. Returns Type Description TReturnConstant Constant value in any case. Значение константы в любом случае. | Improve this Doc View Source AddAllAndReturnTrue(IList<TElement>) Adds all elements from other list to this list and returns true. Добавляет все элементы из другого списка в этот список и возвращает true. Declaration public bool AddAllAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements List of values to add. Список значений которые необходимо добавить. Returns Type Description Boolean True value in any case. Значение true в любом случае. | Improve this Doc View Source AddAndReturnConstant(TElement) Adds an item to the end of the list and return constant. Добавляет элемент в конец списка и возвращает константу. Declaration public TReturnConstant AddAndReturnConstant(TElement element) Parameters Type Name Description TElement element Element to add. Добавляемый элемент. Returns Type Description TReturnConstant Constant value in any case. Значение константы в любом случае. | Improve this Doc View Source AddAndReturnTrue(TElement) Adds an item to the end of the list and return true. Добавляет элемент в конец списка и возвращает true. Declaration public bool AddAndReturnTrue(TElement element) Parameters Type Name Description TElement element Element to add. Добавляемый элемент. Returns Type Description Boolean True value in any case. Значение true в любом случае. | Improve this Doc View Source AddFirstAndReturnConstant(IList<TElement>) Adds a value to the list at the first index and return constant. Добавляет значение в список по первому индексу и возвращает константу. Declaration public TReturnConstant AddFirstAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description TReturnConstant Constant value in any case. Значение константы в любом случае. | Improve this Doc View Source AddFirstAndReturnTrue(IList<TElement>) Adds a value to the list at the first index and return true. Добавляет значение в список по первому индексу и возвращает true. Declaration public bool AddFirstAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Element to add. Добавляемый элемент. Returns Type Description Boolean True value in any case. Значение true в любом случае. | Improve this Doc View Source AddSkipFirstAndReturnConstant(IList<TElement>) Adds values to the list skipping the first element and return constant value. Добавляет значения в список пропуская первый элемент и возвращает значение константы. Declaration public TReturnConstant AddSkipFirstAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The list of values to add. Список значений которые необходимо добавить. Returns Type Description TReturnConstant constant value in any case. Значение константы в любом случае. | Improve this Doc View Source AddSkipFirstAndReturnTrue(IList<TElement>) Adds values to the list skipping the first element. Добавляет значения в список пропуская первый элемент. Declaration public bool AddSkipFirstAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The list of values to add. Список значений которые необходимо добавить. Returns Type Description Boolean True value in any case. Значение true в любом случае."
  },
  "api/Platform.Collections.Segments.CharSegment.html": {
    "href": "api/Platform.Collections.Segments.CharSegment.html",
    "title": "Class CharSegment | LinksPlatform's Platform.Collections Library",
    "keywords": "Class CharSegment Inheritance Object Segment < Char > CharSegment Implements IList < Char > Inherited Members Segment<Char>.Base Segment<Char>.Offset Segment<Char>.Length Segment<Char>.Item[Int32] Segment<Char>.Count Segment<Char>.IsReadOnly Segment<Char>.IndexOf(Char) Segment<Char>.Insert(Int32, Char) Segment<Char>.RemoveAt(Int32) Segment<Char>.Add(Char) Segment<Char>.Clear() Segment<Char>.Contains(Char) Segment<Char>.CopyTo(Char[], Int32) Segment<Char>.Remove(Char) Segment<Char>.GetEnumerator() Namespace : Platform.Collections.Segments Assembly : Platform.Collections.dll Syntax public class CharSegment : Segment<char>, IList<char> Constructors | Improve this Doc View Source CharSegment(IList<Char>, Int32, Int32) Declaration public CharSegment(IList<char> base, int offset, int length) Parameters Type Name Description IList < Char > base Int32 offset Int32 length Methods | Improve this Doc View Source Equals(Segment<Char>) Declaration public override bool Equals(Segment<char> other) Parameters Type Name Description Segment < Char > other Returns Type Description Boolean Overrides Platform.Collections.Segments.Segment<System.Char>.Equals(Platform.Collections.Segments.Segment<System.Char>) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Platform.Collections.Segments.Segment<System.Char>.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Platform.Collections.Segments.Segment<System.Char>.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Implicit(CharSegment to String) Declaration public static implicit operator string (CharSegment segment) Parameters Type Name Description CharSegment segment Returns Type Description String Implements IList<>"
  },
  "api/Platform.Collections.Segments.html": {
    "href": "api/Platform.Collections.Segments.html",
    "title": "Namespace Platform.Collections.Segments | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Segments Classes CharSegment Segment<T> Represents the segment of an . Представляет сегмент ."
  },
  "api/Platform.Collections.Segments.Segment-1.html": {
    "href": "api/Platform.Collections.Segments.Segment-1.html",
    "title": "Class Segment<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class Segment<T> Represents the segment of an . Представляет сегмент . Inheritance Object Segment<T> ArrayString<T> CharSegment Implements IList <T> Namespace : Platform.Collections.Segments Assembly : Platform.Collections.dll Syntax public class Segment<T> : IEquatable<Segment<T>>, IList<T> Type Parameters Name Description T The segment elements type. Тип элементов сегмента. Constructors | Improve this Doc View Source Segment(IList<T>, Int32, Int32) Initializes a new instance of the class, using the base list, offset of the segment and its length . Инициализирует новый экземпляр класса , используя список base , offset сегмента и его length . Declaration public Segment(IList<T> base, int offset, int length) Parameters Type Name Description IList <T> base The reference to the original list containing the elements of this segment. Ссылка на исходный список в котором находятся элементы этого сегмента. Int32 offset The offset relative to the base list from which the segment starts. Смещение относительно списка base , с которого начинается сегмент. Int32 length The segment's length. Длина сегмента. Properties | Improve this Doc View Source Base Gets the original list (this segment is a part of it). Возвращает исходный список (частью которого является этот сегмент). Declaration public IList<T> Base { get; } Property Value Type Description IList <T> | Improve this Doc View Source Count Gets the number of elements contained in the . Возвращает число элементов, содержащихся в . Declaration public int Count { get; } Property Value Type Description Int32 The number of elements contained in the . Число элементов, содержащихся в . | Improve this Doc View Source IsReadOnly Gets a value indicating whether the is read-only. Возвращает значение, указывающее, является ли доступным только для чтения. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean true if the is read-only; otherwise, false . Значение true , если доступен только для чтения, в противном случае — значение false . Remarks Any is read-only. Любой доступен только для чтения. | Improve this Doc View Source Item[Int32] Declaration public T this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description T | Improve this Doc View Source Length Gets the length of a segment. Возвращает длину сегмента. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Offset Gets the offset relative to the source list (the index at which this segment starts). Возвращает смещение относительного исходного списка (индекс с которого начинается этот сегмент). Declaration public int Offset { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(T) Adds an item to the . Добавляет элемент в . Declaration public void Add(T item) Parameters Type Name Description T item The element to add to the . Элемент, добавляемый в . | Improve this Doc View Source Clear() Removes all items from the . Удаляет все элементы из . Declaration public void Clear() | Improve this Doc View Source Contains(T) Determines whether the contains a specific value. Определяет, содержит ли определенное значение. Declaration public bool Contains(T item) Parameters Type Name Description T item The value to locate in the . Значение, которое нужно найти в . Returns Type Description Boolean true if the value is found in the ; otherwise, false . Значение true , если значение находится в ; в противном случае - false . | Improve this Doc View Source CopyTo(T[], Int32) Copies the elements of the into an array, starting at a specific array index. Копирует элементы в массив, начиная с определенного индекса массива. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array A one-dimensional array that is the destination of the elements copied from Одномерный массив, который является местом назначения элементов, скопированных из . Int32 arrayIndex The zero-based index in array at which copying begins. Отсчитываемый от нуля индекс в массиве array , с которого начинается копирование. | Improve this Doc View Source Equals(Segment<T>) Declaration public virtual bool Equals(Segment<T> other) Parameters Type Name Description Segment <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetEnumerator() Gets an enumerator that iterates through a . Возвращает перечислитель, который осуществляет итерацию по . Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> An IEnumerator object that can be used to iterate through the the . Объект IEnumerator , который можно использовать для перебора . | Improve this Doc View Source GetHashCode() Gets the hash code of the current instance. Возвращает хэш-код текущего экземпляра . Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source IndexOf(T) Determines the index of a specific item in the . Определяет индекс конкретного элемента в . Declaration public int IndexOf(T item) Parameters Type Name Description T item The object to locate in the . Элемент для поиска в . Returns Type Description Int32 The index of item if found in the segment; otherwise, -1. Индекс item , если он найден в сегменте; в противном случае — значение -1. | Improve this Doc View Source Insert(Int32, T) Inserts an item to the at the specified index. Вставляет элемент в по указанному индексу. Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. Отсчитываемый от нуля индекс, по которому следует вставить элемент item . T item The element to insert into the . Элемент, вставляемый в . | Improve this Doc View Source Remove(T) Removes the first occurrence of a specific value from the . Удаляет первое вхождение указанного значения из . Declaration public bool Remove(T item) Parameters Type Name Description T item The value to remove from the . Значение, которые нужно удалить из . Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Removes the item at the specified index. Удаляет элемент по указанному индексу. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the item to remove. Отсчитываемый от нуля индекс элемента для удаления. Implements IList<>"
  },
  "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase.html": {
    "href": "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase.html",
    "title": "Class AllSegmentsWalkerBase | LinksPlatform's Platform.Collections Library",
    "keywords": "Class AllSegmentsWalkerBase Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase<T, TSegment> Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class AllSegmentsWalkerBase : object Fields | Improve this Doc View Source DefaultMinimumStringSegmentLength Declaration public static readonly int DefaultMinimumStringSegmentLength Field Value Type Description Int32"
  },
  "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase-1.html": {
    "href": "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase-1.html",
    "title": "Class AllSegmentsWalkerBase<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class AllSegmentsWalkerBase<T> Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase <T, Segment <T>> AllSegmentsWalkerBase<T> Inherited Members AllSegmentsWalkerBase<T, Segment<T>>.WalkAll(IList<T>) AllSegmentsWalkerBase<T, Segment<T>>.CreateSegment(IList<T>, Int32, Int32) AllSegmentsWalkerBase<T, Segment<T>>.Iteration(Segment<T>) AllSegmentsWalkerBase.DefaultMinimumStringSegmentLength Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class AllSegmentsWalkerBase<T> : AllSegmentsWalkerBase<T, Segment<T>> Type Parameters Name Description T Methods | Improve this Doc View Source CreateSegment(IList<T>, Int32, Int32) Declaration protected override Segment<T> CreateSegment(IList<T> elements, int offset, int length) Parameters Type Name Description IList <T> elements Int32 offset Int32 length Returns Type Description Segment <T> Overrides Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase<T, Platform.Collections.Segments.Segment<T>>.CreateSegment(IList<T>, System.Int32, System.Int32)"
  },
  "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase-2.html": {
    "href": "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase-2.html",
    "title": "Class AllSegmentsWalkerBase<T, TSegment> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class AllSegmentsWalkerBase<T, TSegment> Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase<T, TSegment> AllSegmentsWalkerBase<T> DuplicateSegmentsWalkerBase<T, TSegment> Inherited Members AllSegmentsWalkerBase.DefaultMinimumStringSegmentLength Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class AllSegmentsWalkerBase<T, TSegment> : AllSegmentsWalkerBase where TSegment : Segment<T> Type Parameters Name Description T TSegment Constructors | Improve this Doc View Source AllSegmentsWalkerBase() Declaration protected AllSegmentsWalkerBase() | Improve this Doc View Source AllSegmentsWalkerBase(Int32) Declaration protected AllSegmentsWalkerBase(int minimumStringSegmentLength) Parameters Type Name Description Int32 minimumStringSegmentLength Methods | Improve this Doc View Source CreateSegment(IList<T>, Int32, Int32) Declaration protected abstract TSegment CreateSegment(IList<T> elements, int offset, int length) Parameters Type Name Description IList <T> elements Int32 offset Int32 length Returns Type Description TSegment | Improve this Doc View Source Iteration(TSegment) Declaration protected abstract void Iteration(TSegment segment) Parameters Type Name Description TSegment segment | Improve this Doc View Source WalkAll(IList<T>) Declaration public virtual void WalkAll(IList<T> elements) Parameters Type Name Description IList <T> elements"
  },
  "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerExtensions.html": {
    "href": "api/Platform.Collections.Segments.Walkers.AllSegmentsWalkerExtensions.html",
    "title": "Class AllSegmentsWalkerExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class AllSegmentsWalkerExtensions Inheritance Object AllSegmentsWalkerExtensions Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public static class AllSegmentsWalkerExtensions : object Methods | Improve this Doc View Source WalkAll(AllSegmentsWalkerBase<Char>, String) Declaration public static void WalkAll(this AllSegmentsWalkerBase<char> walker, string string) Parameters Type Name Description AllSegmentsWalkerBase < Char > walker String string | Improve this Doc View Source WalkAll<TSegment>(AllSegmentsWalkerBase<Char, TSegment>, String) Declaration public static void WalkAll<TSegment>(this AllSegmentsWalkerBase<char, TSegment> walker, string string) where TSegment : Segment<char> Parameters Type Name Description AllSegmentsWalkerBase < Char , TSegment> walker String string Type Parameters Name Description TSegment"
  },
  "api/Platform.Collections.Segments.Walkers.DictionaryBasedDuplicateSegmentsWalkerBase-1.html": {
    "href": "api/Platform.Collections.Segments.Walkers.DictionaryBasedDuplicateSegmentsWalkerBase-1.html",
    "title": "Class DictionaryBasedDuplicateSegmentsWalkerBase<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class DictionaryBasedDuplicateSegmentsWalkerBase<T> Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase <T, Segment <T>> DuplicateSegmentsWalkerBase <T, Segment <T>> DictionaryBasedDuplicateSegmentsWalkerBase <T, Segment <T>> DictionaryBasedDuplicateSegmentsWalkerBase<T> Inherited Members DictionaryBasedDuplicateSegmentsWalkerBase<T, Segment<T>>.DefaultResetDictionaryOnEachWalk DictionaryBasedDuplicateSegmentsWalkerBase<T, Segment<T>>.Dictionary DictionaryBasedDuplicateSegmentsWalkerBase<T, Segment<T>>.WalkAll(IList<T>) DictionaryBasedDuplicateSegmentsWalkerBase<T, Segment<T>>.GetSegmentFrequency(Segment<T>) DictionaryBasedDuplicateSegmentsWalkerBase<T, Segment<T>>.SetSegmentFrequency(Segment<T>, Int64) DuplicateSegmentsWalkerBase<T, Segment<T>>.Iteration(Segment<T>) DuplicateSegmentsWalkerBase<T, Segment<T>>.OnDublicateFound(Segment<T>) DuplicateSegmentsWalkerBase<T, Segment<T>>.GetSegmentFrequency(Segment<T>) DuplicateSegmentsWalkerBase<T, Segment<T>>.SetSegmentFrequency(Segment<T>, Int64) AllSegmentsWalkerBase<T, Segment<T>>.WalkAll(IList<T>) AllSegmentsWalkerBase<T, Segment<T>>.CreateSegment(IList<T>, Int32, Int32) AllSegmentsWalkerBase<T, Segment<T>>.Iteration(Segment<T>) AllSegmentsWalkerBase.DefaultMinimumStringSegmentLength Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class DictionaryBasedDuplicateSegmentsWalkerBase<T> : DictionaryBasedDuplicateSegmentsWalkerBase<T, Segment<T>> Type Parameters Name Description T Constructors | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase() Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase() | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<Segment<T>, Int64>) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<Segment<T>, long> dictionary) Parameters Type Name Description IDictionary < Segment <T>, Int64 > dictionary | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<Segment<T>, Int64>, Int32) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<Segment<T>, long> dictionary, int minimumStringSegmentLength) Parameters Type Name Description IDictionary < Segment <T>, Int64 > dictionary Int32 minimumStringSegmentLength | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<Segment<T>, Int64>, Int32, Boolean) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<Segment<T>, long> dictionary, int minimumStringSegmentLength, bool resetDictionaryOnEachWalk) Parameters Type Name Description IDictionary < Segment <T>, Int64 > dictionary Int32 minimumStringSegmentLength Boolean resetDictionaryOnEachWalk | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(Int32) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(int minimumStringSegmentLength) Parameters Type Name Description Int32 minimumStringSegmentLength | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(Int32, Boolean) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(int minimumStringSegmentLength, bool resetDictionaryOnEachWalk) Parameters Type Name Description Int32 minimumStringSegmentLength Boolean resetDictionaryOnEachWalk"
  },
  "api/Platform.Collections.Segments.Walkers.DictionaryBasedDuplicateSegmentsWalkerBase-2.html": {
    "href": "api/Platform.Collections.Segments.Walkers.DictionaryBasedDuplicateSegmentsWalkerBase-2.html",
    "title": "Class DictionaryBasedDuplicateSegmentsWalkerBase<T, TSegment> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class DictionaryBasedDuplicateSegmentsWalkerBase<T, TSegment> Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase <T, TSegment> DuplicateSegmentsWalkerBase <T, TSegment> DictionaryBasedDuplicateSegmentsWalkerBase<T, TSegment> DictionaryBasedDuplicateSegmentsWalkerBase<T> Inherited Members DuplicateSegmentsWalkerBase<T, TSegment>.Iteration(TSegment) DuplicateSegmentsWalkerBase<T, TSegment>.OnDublicateFound(TSegment) DuplicateSegmentsWalkerBase<T, TSegment>.GetSegmentFrequency(TSegment) DuplicateSegmentsWalkerBase<T, TSegment>.SetSegmentFrequency(TSegment, Int64) AllSegmentsWalkerBase<T, TSegment>.WalkAll(IList<T>) AllSegmentsWalkerBase<T, TSegment>.CreateSegment(IList<T>, Int32, Int32) AllSegmentsWalkerBase<T, TSegment>.Iteration(TSegment) AllSegmentsWalkerBase.DefaultMinimumStringSegmentLength Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class DictionaryBasedDuplicateSegmentsWalkerBase<T, TSegment> : DuplicateSegmentsWalkerBase<T, TSegment> where TSegment : Segment<T> Type Parameters Name Description T TSegment Constructors | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase() Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase() | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<TSegment, Int64>) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<TSegment, long> dictionary) Parameters Type Name Description IDictionary <TSegment, Int64 > dictionary | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<TSegment, Int64>, Int32) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<TSegment, long> dictionary, int minimumStringSegmentLength) Parameters Type Name Description IDictionary <TSegment, Int64 > dictionary Int32 minimumStringSegmentLength | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<TSegment, Int64>, Int32, Boolean) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(IDictionary<TSegment, long> dictionary, int minimumStringSegmentLength, bool resetDictionaryOnEachWalk) Parameters Type Name Description IDictionary <TSegment, Int64 > dictionary Int32 minimumStringSegmentLength Boolean resetDictionaryOnEachWalk | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(Int32) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(int minimumStringSegmentLength) Parameters Type Name Description Int32 minimumStringSegmentLength | Improve this Doc View Source DictionaryBasedDuplicateSegmentsWalkerBase(Int32, Boolean) Declaration protected DictionaryBasedDuplicateSegmentsWalkerBase(int minimumStringSegmentLength, bool resetDictionaryOnEachWalk) Parameters Type Name Description Int32 minimumStringSegmentLength Boolean resetDictionaryOnEachWalk Fields | Improve this Doc View Source DefaultResetDictionaryOnEachWalk Declaration public static readonly bool DefaultResetDictionaryOnEachWalk Field Value Type Description Boolean | Improve this Doc View Source Dictionary Declaration protected IDictionary<TSegment, long> Dictionary Field Value Type Description IDictionary <TSegment, Int64 > Methods | Improve this Doc View Source GetSegmentFrequency(TSegment) Declaration protected override long GetSegmentFrequency(TSegment segment) Parameters Type Name Description TSegment segment Returns Type Description Int64 Overrides Platform.Collections.Segments.Walkers.DuplicateSegmentsWalkerBase<T, TSegment>.GetSegmentFrequency(TSegment) | Improve this Doc View Source SetSegmentFrequency(TSegment, Int64) Declaration protected override void SetSegmentFrequency(TSegment segment, long frequency) Parameters Type Name Description TSegment segment Int64 frequency Overrides Platform.Collections.Segments.Walkers.DuplicateSegmentsWalkerBase<T, TSegment>.SetSegmentFrequency(TSegment, System.Int64) | Improve this Doc View Source WalkAll(IList<T>) Declaration public override void WalkAll(IList<T> elements) Parameters Type Name Description IList <T> elements Overrides Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase<T, TSegment>.WalkAll(IList<T>)"
  },
  "api/Platform.Collections.Segments.Walkers.DuplicateSegmentsWalkerBase-1.html": {
    "href": "api/Platform.Collections.Segments.Walkers.DuplicateSegmentsWalkerBase-1.html",
    "title": "Class DuplicateSegmentsWalkerBase<T> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class DuplicateSegmentsWalkerBase<T> Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase <T, Segment <T>> DuplicateSegmentsWalkerBase <T, Segment <T>> DuplicateSegmentsWalkerBase<T> Inherited Members DuplicateSegmentsWalkerBase<T, Segment<T>>.Iteration(Segment<T>) DuplicateSegmentsWalkerBase<T, Segment<T>>.OnDublicateFound(Segment<T>) DuplicateSegmentsWalkerBase<T, Segment<T>>.GetSegmentFrequency(Segment<T>) DuplicateSegmentsWalkerBase<T, Segment<T>>.SetSegmentFrequency(Segment<T>, Int64) AllSegmentsWalkerBase<T, Segment<T>>.WalkAll(IList<T>) AllSegmentsWalkerBase<T, Segment<T>>.CreateSegment(IList<T>, Int32, Int32) AllSegmentsWalkerBase<T, Segment<T>>.Iteration(Segment<T>) AllSegmentsWalkerBase.DefaultMinimumStringSegmentLength Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class DuplicateSegmentsWalkerBase<T> : DuplicateSegmentsWalkerBase<T, Segment<T>> Type Parameters Name Description T"
  },
  "api/Platform.Collections.Segments.Walkers.DuplicateSegmentsWalkerBase-2.html": {
    "href": "api/Platform.Collections.Segments.Walkers.DuplicateSegmentsWalkerBase-2.html",
    "title": "Class DuplicateSegmentsWalkerBase<T, TSegment> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class DuplicateSegmentsWalkerBase<T, TSegment> Inheritance Object AllSegmentsWalkerBase AllSegmentsWalkerBase <T, TSegment> DuplicateSegmentsWalkerBase<T, TSegment> DictionaryBasedDuplicateSegmentsWalkerBase<T, TSegment> DuplicateSegmentsWalkerBase<T> Inherited Members AllSegmentsWalkerBase<T, TSegment>.WalkAll(IList<T>) AllSegmentsWalkerBase<T, TSegment>.CreateSegment(IList<T>, Int32, Int32) AllSegmentsWalkerBase<T, TSegment>.Iteration(TSegment) AllSegmentsWalkerBase.DefaultMinimumStringSegmentLength Namespace : Platform.Collections.Segments.Walkers Assembly : Platform.Collections.dll Syntax public abstract class DuplicateSegmentsWalkerBase<T, TSegment> : AllSegmentsWalkerBase<T, TSegment> where TSegment : Segment<T> Type Parameters Name Description T TSegment Constructors | Improve this Doc View Source DuplicateSegmentsWalkerBase() Declaration protected DuplicateSegmentsWalkerBase() | Improve this Doc View Source DuplicateSegmentsWalkerBase(Int32) Declaration protected DuplicateSegmentsWalkerBase(int minimumStringSegmentLength) Parameters Type Name Description Int32 minimumStringSegmentLength Methods | Improve this Doc View Source GetSegmentFrequency(TSegment) Declaration protected abstract long GetSegmentFrequency(TSegment segment) Parameters Type Name Description TSegment segment Returns Type Description Int64 | Improve this Doc View Source Iteration(TSegment) Declaration protected override void Iteration(TSegment segment) Parameters Type Name Description TSegment segment Overrides Platform.Collections.Segments.Walkers.AllSegmentsWalkerBase<T, TSegment>.Iteration(TSegment) | Improve this Doc View Source OnDublicateFound(TSegment) Declaration protected abstract void OnDublicateFound(TSegment segment) Parameters Type Name Description TSegment segment | Improve this Doc View Source SetSegmentFrequency(TSegment, Int64) Declaration protected abstract void SetSegmentFrequency(TSegment segment, long frequency) Parameters Type Name Description TSegment segment Int64 frequency"
  },
  "api/Platform.Collections.Segments.Walkers.html": {
    "href": "api/Platform.Collections.Segments.Walkers.html",
    "title": "Namespace Platform.Collections.Segments.Walkers | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Segments.Walkers Classes AllSegmentsWalkerBase AllSegmentsWalkerBase<T> AllSegmentsWalkerBase<T, TSegment> AllSegmentsWalkerExtensions DictionaryBasedDuplicateSegmentsWalkerBase<T> DictionaryBasedDuplicateSegmentsWalkerBase<T, TSegment> DuplicateSegmentsWalkerBase<T> DuplicateSegmentsWalkerBase<T, TSegment>"
  },
  "api/Platform.Collections.Sets.html": {
    "href": "api/Platform.Collections.Sets.html",
    "title": "Namespace Platform.Collections.Sets | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Sets Classes ISetExtensions SetFiller<TElement, TReturnConstant>"
  },
  "api/Platform.Collections.Sets.ISetExtensions.html": {
    "href": "api/Platform.Collections.Sets.ISetExtensions.html",
    "title": "Class ISetExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class ISetExtensions Inheritance Object ISetExtensions Namespace : Platform.Collections.Sets Assembly : Platform.Collections.dll Syntax public static class ISetExtensions : object Methods | Improve this Doc View Source AddAll<T>(ISet<T>, IList<T>) Declaration public static void AddAll<T>(this ISet<T> set, IList<T> elements) Parameters Type Name Description ISet <T> set IList <T> elements Type Parameters Name Description T | Improve this Doc View Source AddAllAndReturnTrue<T>(ISet<T>, IList<T>) Declaration public static bool AddAllAndReturnTrue<T>(this ISet<T> set, IList<T> elements) Parameters Type Name Description ISet <T> set IList <T> elements Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source AddAndReturnTrue<T>(ISet<T>, T) Declaration public static bool AddAndReturnTrue<T>(this ISet<T> set, T element) Parameters Type Name Description ISet <T> set T element Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source AddAndReturnVoid<T>(ISet<T>, T) Declaration public static void AddAndReturnVoid<T>(this ISet<T> set, T element) Parameters Type Name Description ISet <T> set T element Type Parameters Name Description T | Improve this Doc View Source AddFirst<T>(ISet<T>, IList<T>) Declaration public static void AddFirst<T>(this ISet<T> set, IList<T> elements) Parameters Type Name Description ISet <T> set IList <T> elements Type Parameters Name Description T | Improve this Doc View Source AddFirstAndReturnTrue<T>(ISet<T>, IList<T>) Declaration public static bool AddFirstAndReturnTrue<T>(this ISet<T> set, IList<T> elements) Parameters Type Name Description ISet <T> set IList <T> elements Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source AddSkipFirst<T>(ISet<T>, IList<T>) Declaration public static void AddSkipFirst<T>(this ISet<T> set, IList<T> elements) Parameters Type Name Description ISet <T> set IList <T> elements Type Parameters Name Description T | Improve this Doc View Source AddSkipFirst<T>(ISet<T>, IList<T>, Int32) Declaration public static void AddSkipFirst<T>(this ISet<T> set, IList<T> elements, int skip) Parameters Type Name Description ISet <T> set IList <T> elements Int32 skip Type Parameters Name Description T | Improve this Doc View Source AddSkipFirstAndReturnTrue<T>(ISet<T>, IList<T>) Declaration public static bool AddSkipFirstAndReturnTrue<T>(this ISet<T> set, IList<T> elements) Parameters Type Name Description ISet <T> set IList <T> elements Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source DoNotContains<T>(ISet<T>, T) Declaration public static bool DoNotContains<T>(this ISet<T> set, T element) Parameters Type Name Description ISet <T> set T element Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source RemoveAndReturnVoid<T>(ISet<T>, T) Declaration public static void RemoveAndReturnVoid<T>(this ISet<T> set, T element) Parameters Type Name Description ISet <T> set T element Type Parameters Name Description T"
  },
  "api/Platform.Collections.Sets.SetFiller-2.html": {
    "href": "api/Platform.Collections.Sets.SetFiller-2.html",
    "title": "Class SetFiller<TElement, TReturnConstant> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class SetFiller<TElement, TReturnConstant> Inheritance Object SetFiller<TElement, TReturnConstant> Namespace : Platform.Collections.Sets Assembly : Platform.Collections.dll Syntax public class SetFiller<TElement, TReturnConstant> : object Type Parameters Name Description TElement TReturnConstant Constructors | Improve this Doc View Source SetFiller(ISet<TElement>) Declaration public SetFiller(ISet<TElement> set) Parameters Type Name Description ISet <TElement> set | Improve this Doc View Source SetFiller(ISet<TElement>, TReturnConstant) Declaration public SetFiller(ISet<TElement> set, TReturnConstant returnConstant) Parameters Type Name Description ISet <TElement> set TReturnConstant returnConstant Fields | Improve this Doc View Source _returnConstant Declaration protected readonly TReturnConstant _returnConstant Field Value Type Description TReturnConstant | Improve this Doc View Source _set Declaration protected readonly ISet<TElement> _set Field Value Type Description ISet <TElement> Methods | Improve this Doc View Source Add(TElement) Declaration public void Add(TElement element) Parameters Type Name Description TElement element | Improve this Doc View Source AddAllAndReturnConstant(IList<TElement>) Declaration public TReturnConstant AddAllAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description TReturnConstant | Improve this Doc View Source AddAllAndReturnTrue(IList<TElement>) Declaration public bool AddAllAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description Boolean | Improve this Doc View Source AddAndReturnConstant(TElement) Declaration public TReturnConstant AddAndReturnConstant(TElement element) Parameters Type Name Description TElement element Returns Type Description TReturnConstant | Improve this Doc View Source AddAndReturnTrue(TElement) Declaration public bool AddAndReturnTrue(TElement element) Parameters Type Name Description TElement element Returns Type Description Boolean | Improve this Doc View Source AddFirstAndReturnConstant(IList<TElement>) Declaration public TReturnConstant AddFirstAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description TReturnConstant | Improve this Doc View Source AddFirstAndReturnTrue(IList<TElement>) Declaration public bool AddFirstAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description Boolean | Improve this Doc View Source AddSkipFirstAndReturnConstant(IList<TElement>) Declaration public TReturnConstant AddSkipFirstAndReturnConstant(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description TReturnConstant | Improve this Doc View Source AddSkipFirstAndReturnTrue(IList<TElement>) Declaration public bool AddSkipFirstAndReturnTrue(IList<TElement> elements) Parameters Type Name Description IList <TElement> elements Returns Type Description Boolean"
  },
  "api/Platform.Collections.Stacks.DefaultStack-1.html": {
    "href": "api/Platform.Collections.Stacks.DefaultStack-1.html",
    "title": "Class DefaultStack<TElement> | LinksPlatform's Platform.Collections Library",
    "keywords": "Class DefaultStack<TElement> Inheritance Object DefaultStack<TElement> Implements IStack <TElement> Namespace : Platform.Collections.Stacks Assembly : Platform.Collections.dll Syntax public class DefaultStack<TElement> : Stack<TElement>, IStack<TElement> Type Parameters Name Description TElement Properties | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Implements IStack<TElement> Extension Methods IStackExtensions.Clear<T>(IStack<T>) IStackExtensions.PopOrDefault<T>(IStack<T>) IStackExtensions.PeekOrDefault<T>(IStack<T>)"
  },
  "api/Platform.Collections.Stacks.html": {
    "href": "api/Platform.Collections.Stacks.html",
    "title": "Namespace Platform.Collections.Stacks | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Stacks Classes DefaultStack<TElement> IStackExtensions StackExtensions Interfaces IStack<TElement> IStackFactory<TElement>"
  },
  "api/Platform.Collections.Stacks.IStack-1.html": {
    "href": "api/Platform.Collections.Stacks.IStack-1.html",
    "title": "Interface IStack<TElement> | LinksPlatform's Platform.Collections Library",
    "keywords": "Interface IStack<TElement> Namespace : Platform.Collections.Stacks Assembly : Platform.Collections.dll Syntax public interface IStack<TElement> Type Parameters Name Description TElement Properties | Improve this Doc View Source IsEmpty Declaration bool IsEmpty { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Peek() Declaration TElement Peek() Returns Type Description TElement | Improve this Doc View Source Pop() Declaration TElement Pop() Returns Type Description TElement | Improve this Doc View Source Push(TElement) Declaration void Push(TElement element) Parameters Type Name Description TElement element Extension Methods IStackExtensions.Clear<T>(IStack<T>) IStackExtensions.PopOrDefault<T>(IStack<T>) IStackExtensions.PeekOrDefault<T>(IStack<T>)"
  },
  "api/Platform.Collections.Stacks.IStackExtensions.html": {
    "href": "api/Platform.Collections.Stacks.IStackExtensions.html",
    "title": "Class IStackExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class IStackExtensions Inheritance Object IStackExtensions Namespace : Platform.Collections.Stacks Assembly : Platform.Collections.dll Syntax public static class IStackExtensions : object Methods | Improve this Doc View Source Clear<T>(IStack<T>) Declaration public static void Clear<T>(this IStack<T> stack) Parameters Type Name Description IStack <T> stack Type Parameters Name Description T | Improve this Doc View Source PeekOrDefault<T>(IStack<T>) Declaration public static T PeekOrDefault<T>(this IStack<T> stack) Parameters Type Name Description IStack <T> stack Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source PopOrDefault<T>(IStack<T>) Declaration public static T PopOrDefault<T>(this IStack<T> stack) Parameters Type Name Description IStack <T> stack Returns Type Description T Type Parameters Name Description T"
  },
  "api/Platform.Collections.Stacks.IStackFactory-1.html": {
    "href": "api/Platform.Collections.Stacks.IStackFactory-1.html",
    "title": "Interface IStackFactory<TElement> | LinksPlatform's Platform.Collections Library",
    "keywords": "Interface IStackFactory<TElement> Namespace : Platform.Collections.Stacks Assembly : Platform.Collections.dll Syntax public interface IStackFactory<TElement> : IFactory<IStack<TElement>> Type Parameters Name Description TElement"
  },
  "api/Platform.Collections.Stacks.StackExtensions.html": {
    "href": "api/Platform.Collections.Stacks.StackExtensions.html",
    "title": "Class StackExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class StackExtensions Inheritance Object StackExtensions Namespace : Platform.Collections.Stacks Assembly : Platform.Collections.dll Syntax public static class StackExtensions : object Methods | Improve this Doc View Source PeekOrDefault<T>(Stack<T>) Declaration public static T PeekOrDefault<T>(this Stack<T> stack) Parameters Type Name Description Stack <T> stack Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source PopOrDefault<T>(Stack<T>) Declaration public static T PopOrDefault<T>(this Stack<T> stack) Parameters Type Name Description Stack <T> stack Returns Type Description T Type Parameters Name Description T"
  },
  "api/Platform.Collections.StringExtensions.html": {
    "href": "api/Platform.Collections.StringExtensions.html",
    "title": "Class StringExtensions | LinksPlatform's Platform.Collections Library",
    "keywords": "Class StringExtensions Inheritance Object StringExtensions Namespace : Platform.Collections Assembly : Platform.Collections.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source CapitalizeFirstLetter(String) Declaration public static string CapitalizeFirstLetter(this string string) Parameters Type Name Description String string Returns Type Description String | Improve this Doc View Source TrimSingle(String, Char) Declaration public static string TrimSingle(this string string, char charToTrim) Parameters Type Name Description String string Char charToTrim Returns Type Description String | Improve this Doc View Source Truncate(String, Int32) Declaration public static string Truncate(this string string, int maxLength) Parameters Type Name Description String string Int32 maxLength Returns Type Description String"
  },
  "api/Platform.Collections.Trees.html": {
    "href": "api/Platform.Collections.Trees.html",
    "title": "Namespace Platform.Collections.Trees | LinksPlatform's Platform.Collections Library",
    "keywords": "Namespace Platform.Collections.Trees Classes Node"
  },
  "api/Platform.Collections.Trees.Node.html": {
    "href": "api/Platform.Collections.Trees.Node.html",
    "title": "Class Node | LinksPlatform's Platform.Collections Library",
    "keywords": "Class Node Inheritance Object Node Namespace : Platform.Collections.Trees Assembly : Platform.Collections.dll Syntax public class Node : object Constructors | Improve this Doc View Source Node() Declaration public Node() | Improve this Doc View Source Node(Object) Declaration public Node(object value) Parameters Type Name Description Object value Properties | Improve this Doc View Source ChildNodes Declaration public Dictionary<object, Node> ChildNodes { get; } Property Value Type Description Dictionary < Object , Node > | Improve this Doc View Source Item[Object] Declaration public Node this[object key] { get; set; } Parameters Type Name Description Object key Property Value Type Description Node | Improve this Doc View Source Value Declaration public object Value { get; set; } Property Value Type Description Object Methods | Improve this Doc View Source AddChild(Object) Declaration public Node AddChild(object key) Parameters Type Name Description Object key Returns Type Description Node | Improve this Doc View Source AddChild(Object, Node) Declaration public Node AddChild(object key, Node child) Parameters Type Name Description Object key Node child Returns Type Description Node | Improve this Doc View Source AddChild(Object, Object) Declaration public Node AddChild(object key, object value) Parameters Type Name Description Object key Object value Returns Type Description Node | Improve this Doc View Source ContainsChild(Object[]) Declaration public bool ContainsChild(params object[] keys) Parameters Type Name Description Object [] keys Returns Type Description Boolean | Improve this Doc View Source GetChild(Object[]) Declaration public Node GetChild(params object[] keys) Parameters Type Name Description Object [] keys Returns Type Description Node | Improve this Doc View Source GetChildValue(Object[]) Declaration public object GetChildValue(params object[] keys) Parameters Type Name Description Object [] keys Returns Type Description Object | Improve this Doc View Source SetChild(Object) Declaration public Node SetChild(object key) Parameters Type Name Description Object key Returns Type Description Node | Improve this Doc View Source SetChild(Object[]) Declaration public Node SetChild(params object[] keys) Parameters Type Name Description Object [] keys Returns Type Description Node | Improve this Doc View Source SetChildValue(Object, Object) Declaration public Node SetChildValue(object value, object key) Parameters Type Name Description Object value Object key Returns Type Description Node | Improve this Doc View Source SetChildValue(Object, Object[]) Declaration public Node SetChildValue(object value, params object[] keys) Parameters Type Name Description Object value Object [] keys Returns Type Description Node"
  },
  "README.html": {
    "href": "README.html",
    "title": "Collections | LinksPlatform's Platform.Collections Library",
    "keywords": "Collections LinksPlatform's Platform.Collections Class Library. Namespace: Platform.Collections Forked from: Konard/LinksPlatform/Platform/Platform.Helpers/Collections NuGet package: Platform.Collections Documentation PDF file with code for e-readers. Depend on System.Numerics.Vectors Platform.Interfaces Platform.Disposables Platform.Ranges Platform.Random Dependent libraries Platform.Threading Platform.Reflection Platform.Communication.Protocol.Lino"
  }
}